<?php

/**
 * TrdGrouponAdTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdGrouponAdTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TrdGrouponAdTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdGrouponAd');
    }

    public static function houtaGetCount($type = null,$stime=null,$etime=null)
    {
        $query = self::getInstance()->createQuery();

        if(($stime && $etime) && $stime>$etime) return 0;

        if($stime)
        {
            $query->andWhere('stime >= ?',$stime);
        }

        if($etime)
        {
            $query->andWhere('stime <= ?',$etime);
        }

        # 待审核
        if($type == 'check')
        {
            $query->andWhere('status = 5');

        }
        #　已审核
        elseif($type == 'pass')
        {
            $query->andWhere('status = 3');
        }
        #　未通过
        elseif($type == 'failed')
        {
            $query->andWhere('status = 2');
        }
        #　进行中
        elseif($type == 'ing')
        {
            $time = time();
            $query->andWhere('status = 3');
            $query->andWhere('stime <= ?',$time);
            $query->andWhere('etime > ?',$time);
        }
        #　已过期
        elseif($type == 'old')
        {
            $time = time();
            $query->andWhere('etime < ?',$time);
        }

        return $query->count();
    }


    public static function houtaGetList($offset=0,$limit=20,$type=null,$stime=null,$etime=null)
    {
        $query = self::getInstance()->createQuery();

        if(($stime && $etime) && $stime>$etime) return ;

        if($stime)
        {
            $query->andWhere('stime >= ?',$stime);
        }

        if($etime)
        {
            $query->andWhere('stime <= ?',$etime);
        }
        # 待审核
        if($type == 'check')
        {
            $query->andWhere('status = 5');

        }
        #　已审核
        elseif($type == 'pass')
        {
            $query->andWhere('status = 3');
        }
        #　未通过
        elseif($type == 'failed')
        {
            $query->andWhere('status = 2');
        }
        #　进行中
        elseif($type == 'ing')
        {
            $time = time();
            $query->andWhere('status = 3');
            $query->andWhere('stime <= ?',$time);
            $query->andWhere('etime > ?',$time);
        }
        #　已过期
        elseif($type == 'old')
        {
            $time = time();
            $query->andWhere('etime < ?',$time);
        }

        $query->orderBy('id asc')
            ->offset($offset)
            ->limit($limit);
        return $query->fetchArray();
    }

    public static function recommend($date = null)
    {
        $data = CacheModel::getCache();

        if (empty($data)) {
            $query = self::getInstance()->createQuery()
                ->select('group_id as id,title')
                ->where('status = 3');
            $query->andWhere('etime > ?',$date);
            $tmp = $query->andWhere('stime <= ?',$date)->fetchArray();
            if(!empty($tmp))foreach($tmp as $v)
            {
                $data[$v['id']] = $v;
            }
            CacheModel::setCache($data, 600);
        }

        return $data;
    }
    # 获取当日推荐
    public static function getRecommend($arg=null)
    {
        $data = CacheModel::getCache();
 
        if (empty($data)) {

            $return = self::recommend($arg);
            $data = array();
            $recommend_info_arr = array();
            $count = count($return);
            $num = 12;
            if ($count < $num) {
                $buchong = TrdGrouponTable::getJingpinByRank($num, 0, $arg);
                if (empty($buchong)) $buchong = array();
                if (!empty($return) && is_array($return)) {
                    $recommend_info_arr = $return + $buchong;
                } else {
                    $recommend_info_arr = $buchong;
                }
            }else
            {
                $recommend_info_arr = $return;
            }
            if (is_array($recommend_info_arr) && !empty($recommend_info_arr)) {
                $recommend_info_arr = array_slice($recommend_info_arr, 0, $num);
                $data = self::getAllData($recommend_info_arr);
            }
            CacheModel::setCache($data, 600);
        }
 
        if(is_array($data) && !empty($data) ) shuffle($data);
 

        return $data;
    }

    public static function getAllData($ids)
    {
        $data = CacheModel::getCache();

        if (empty($data)) {
            $grouponTable = TrdGrouponTable::getInstance();
            $data = $grouponTable->getAllByIds($ids,'discount asc',134,134);
            CacheModel::setCache($data, 600);
        }

        return (array)$data;
    }


    public static function getJifenData($stime=null,$etime=null)
    {
        if(empty($stime) || empty($etime)) return ;
        $data = array();
        $query = self::getInstance()
            ->createQuery()
            ->select('count(id) as count ,pay_type,pay_date')
            ->addWhere('status = 3')
            ->groupBy('pay_type')
        ;
        if($stime == $etime)
        {
            $query->addWhere('pay_date = ?',$stime);
        }else
        {
            $query->addWhere('pay_date >= ?',$stime);
            $query->addWhere('pay_date <= ?',$etime);
            $query->addGroupBy('pay_date');
        }
        $tmp = $query->fetchArray();
        if(!empty($tmp))
        {
            foreach($tmp as $v)
            {
                $data[$v['pay_date']][$v['pay_type']] = $v['count'];
            }
        }
        return $data;
    }

}