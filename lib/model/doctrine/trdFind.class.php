<?php

/**
 * trdFind
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class trdFind extends BasetrdFind
{
    // 状态
    public static $_status = array(
        0 => '待审核',
        1 => '上架中',
        2 => '已下架',
    );

    //获取一张图片
    public function getImgPath($width, $height){
        $imgs_attr = $this->imgs_attr;
        if(FunBase::is_json($imgs_attr)){
            $imgs_arr = json_decode($imgs_attr ,true);
        }else{
            $imgs_arr = array();
        }

        return array_shift($imgs_arr).'?imageView2/1/w/'.$width.'/h/'.$height;
    }

    public function postInsert($event)
    {
        $message = array(
            'id' => $this->getId(),
            'type' => 'create',
            'channelType' => 'newfind'
        );
        $this->sendMqMessage($message);
        parent::postInsert($event);
    }

    public function preUpdate($event)
    {
        $new = $this->getModified();
        $modified = array_keys($new);

        $updateFields = array('title','price','hits','root_id','children_id', 'store_id','tags_attr','status');
        if(array_intersect($updateFields,$modified)){
            $message = array(
                'id' => $this->getId(),
                'channelType' => 'newfind',
                'modified' => $modified,
                'type' => 'update',
            );
            $this->sendMqMessage($message);
        }

        parent::preUpdate($event);
    }

    public function postDelete($event)
    {
        $message = array(
            'id' => $this->getId(),
            'type' => 'delete',
            'channelType' => 'newfind'
        );
        $this->sendMqMessage($message);
        parent::postDelete($event);
    }

    public function sendMqMessage($message)
    {
        $amqpParams = sfConfig::get("app_mabbitmq_options_shihuo");
        $connection = new AMQPConnection($amqpParams['params']['host'], $amqpParams['params']['port'], $amqpParams['params']['user'], $amqpParams['params']['pass'], $amqpParams['params']['vhost']);
        $channel = $connection->channel();
        $arguments = array(
            "x-dead-letter-exchange" => array("S", "amq.topic"),
            "x-message-ttl" => array("I", 2000),
            "x-dead-letter-routing-key" => array("S", "shihuo.newfind.detail")
        );
        $channel->queue_declare('newfind_deferred', false, true, false, false, false, $arguments);


        $msg = new AMQPMessage(json_encode($message));
        $channel->basic_publish($msg, '', 'newfind_deferred');
    }

}
