<?php

/**
 * trdShaiwuProductTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class trdShaiwuProductTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object trdShaiwuProductTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('trdShaiwuProduct');
    }

    public static function myListQuery()
    {
        $query = self::getInstance()->createQuery('m')
            ->whereIn('m.status', array(0, 1, 2));

        $sort = sfContext::getInstance()->getUser()->getAttribute('trd_shaiwu_product.sort', null, 'admin_module');
        if(!$sort || !$sort[0]) $query = $query->orderBy('m.created_at DESC');

        return $query;
    }

    /**
     * @param $page
     * @param $type
     * @param int $isHot
     * @param int $pageSize
     * @param int $lastTime
     * @param string $date
     * @return mixed
     */
    public function getList($page=1, $type, $isHot = 0, $pageSize = 30, $lastTime = 0 , $date = '', $keywords='')
    {
        $now = date('Y-m-d H:i:s');
        if(!empty($keywords))
        {
            $es = new shaiwuSearch();
            $searchData = array(
                'keywords'=>$keywords,
                'pageNo'=>$page,
                'pageSize'=>$pageSize,
            );
            if(!empty($type)) $searchData['type'] = $type;
            if(!empty($isHot)) $searchData['isHot'] = $isHot;
            $rs = $es->search($searchData);

            if(true === $rs['status'] && !empty($rs['result']) && is_array($rs['result']))
            {
                $ids = array();
                foreach($rs['result'] as $v)
                {
                    $ids[] = $v['id'];
                }
                $query = self::getInstance()->createQuery('t')
                    ->select('t.id,t.activity_id,t.is_star,t.title,t.intro,t.author_id,t.author_name,t.type,t.is_hot,t.support,t.agaist,t.comment_count,t.front_pic,t.publish_time,m.Content')
                    ->whereIn('t.id',$ids)
                    ->andWhere('t.publish_time <= ?', $now)
                    ->andWhere('t.status = 1');
                $data['list'] = $query->fetchArray();
                $data['count'] = $rs['num'];
            }
            else
            {
                return array();
            }
        }
        else
        {
            $query = self::getInstance()->createQuery('t')
                ->select('t.id,t.activity_id,t.is_star,t.title,t.intro,t.author_id,t.author_name,t.type,t.is_hot,t.support,t.agaist,t.comment_count,t.front_pic,t.publish_time,m.Content')
                ->where('t.status = 1')
                ->andWhere('t.publish_time <= ?', $now)
                ->orderBy('t.publish_time desc');
            if (!empty($type)) {
                $query = $query->andWhere('t.type = ?', $type);
            }
            if (1 == $isHot) {
                $query = $query->andWhere('t.is_hot = ?', 1);
            }
            if (!empty($lastTime)) {
                $query = $query->andWhere('t.publish_time <', $lastTime);
            }


            $offset = ($page - 1) * $pageSize;

            if ($date) {
                $query->andWhere('t.publish_time < ?' , date('Y-m-d H:i:s', $date))->limit($pageSize);
            } else {
                $query = $query->offset($offset)->limit($pageSize);
            }

            $data = $query->fetchArray();
        }

        return $data;
    }

    public static function getActivityList($activity_id,$page=1,$pageSize=10,$rank=0)
    {
        $now = date('Y-m-d H:i:s');
        $offset = ($page - 1) * $pageSize;
        $query  = self::getInstance()->createQuery()
            ->select('id,is_hot,is_star,title,author_name,author_id,front_pic,publish_time,support,agaist,comment_count,rank')
            ->where('activity_id =?',$activity_id)
            ->andWhere('status =?',1)
            ->andWhere('publish_time <= ?', $now)
            ->orderBy('is_hot desc,rank desc')
            ->offset($offset)
            ->limit($pageSize);
        if (!empty($rank)) {
            $query = $query->andWhere('rank < ?', $rank);
        }
        return $query->fetchArray();
    }

    # 获取类目总数
    public function getCount($type, $isHot = 0, $cacheOffset = 0)
    {
        $data = CacheModel::getCache();
        if (empty($data)) {
            $now = date('Y-m-d H:i:s');
            $query = self::getInstance()->createQuery('t')
                ->where('t.status = 1')
                ->andWhere('t.publish_time <= ?', $now);
            if (!empty($type)) {
                $query = $query->andWhere('t.type = ?', $type);
            }
            if (1 == $isHot) {
                $query = $query->andWhere('t.is_hot = ?', 1);
            }

            $data = $query->count();
            if (empty($data)) {
                return false;
            }
            CacheModel::setCache($data, 180);
        }

        return $data;
    }

    # 获取晒物内容
    public function getShaiwuById($id = null)
    {
        $data = CacheModel::getCache();
        if (empty($data)) {
            $data = self::getInstance()->find($id);
            if (empty($data)) {
                return;
            }
            $data = $data->toArray();
            unset($data['created_at'], $data['updated_at']);

            # 获取内容
            $tmp = trdShaiwuProductContentTable::getInstance()->getContentById($id);

            if (!empty($tmp)) {
                $data['content'] = $tmp['content'];
                $data['urls'] = !empty($tmp['urls'])?json_decode($tmp['urls'],true):'';
            }
            CacheModel::setCache($data, 60);
        }

        return $data;
    }

    # 获取个人晒物列表
    public function getUserList($page = 1, $uid, $pageSize = 4)
    {
        //    $data = CacheModel::getCache();
        //   if( empty($data) )
        //   {

        $query = self::getInstance()->createQuery('t')
            ->where('t.author_id = ?', $uid)
            ->orderBy('t.id desc');
        if (empty($page)) {
            $page = 1;
        }
        $offset = ($page - 1) * $pageSize;
        $query->offset($offset)->limit($pageSize);
        $data = $query->fetchArray();
        //       CacheModel::setCache($data,180);
        //   }
        return $data;
    }

    public function getUserListCount($uid)
    {
        $data = CacheModel::getCache();
        if (empty($data)) {
            $data = self::getInstance()->createQuery('t')
                ->where('t.author_id = ?', $uid)
                ->orderBy('t.id desc')->count();
            CacheModel::setCache($data, 60);
        }

        return $data;
    }

    # 获取用户晒物数量
    public function getShaiwuCount($uid = null)
    {
        $data = CacheModel::getCache();
        if (empty($data)) {
            $t = self::getInstance()->createQuery('t')
                ->select('count(t.is_hot=0 OR NULL) as putong,count(t.is_hot=1 OR NULL) as jinghua')
                ->where('t.author_id = ?', $uid)
                ->andWhere('t.status = 1')//审核通过
                ->orderBy('t.id desc')->fetchArray();
            $data = !empty($t[0]) ? $t[0] : null;
            CacheModel::setCache($data, 60);
        }

        return $data;
    }

    # 获取焦点图
    public function getFocus($isForce = false)
    {
        $key = 'shaiwu_front_focus';
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(1);
        $data = unserialize($redis->get($key));
        if (empty($data) || $isForce === true) {
            $data = array();
            $ids = unserialize($redis->get('trade.shaiwu.index.slide'));
            if (!is_array($ids) && empty($ids)) {
                return false;
            }
            $t = array_slice($ids, 0, 6);
            foreach ($t as $v) {
                if (!empty($v['id'])) {
                    $s[] = (int)$v['id'];
                }
            }
            array_unique($s);


            # 排序
            foreach ($s as $v) {
                $t = self::getInstance()->createQuery('t')
                    ->select('title,author_name,author_id,intro,publish_time,front_pic')
                    ->where('t.id = ?', $v)
                    ->andWhere('t.status = 1')//审核通过
                    ->fetchArray();
                if (!empty($t[0])) {
                    $data[$v] = $t[0];
                }
            }
            if (empty($data)) {
                return false;
            }

            # 获取用户等级
            foreach ($data as $k => $v) {
                $user = TrdAccountTable::getByHupuId($v['author_id']);
                if (!empty($user)) {
                    $levelInfo = $user->getLevel();
                    $data[$k]['level'] = (int)$levelInfo['level'];
                }
            }
            $redis->set($key, serialize($data), 1800);
        }

        return $data;
    }

    # 获取精华晒物
    public function getHotData($isForce = false)
    {
        $key = 'shaiwu_front_hot';
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(1);
        $data = unserialize($redis->get($key));
        if (empty($data) || $isForce === true) {
            $data = array();
            $ids = unserialize($redis->get('trade.shaiwu.index.elite'));
            if (!is_array($ids) && empty($ids)) {
                return false;
            }

            $t = array_slice($ids, 0, 6);
            foreach ($t as $v) {
                if (!empty($v['id'])) {
                    $s[] = (int)$v['id'];
                }
            }
            array_unique($s);

            # 排序
            foreach ($s as $v) {
                $t = self::getInstance()->createQuery('t')
                    ->select('id,title,support,agaist,comment_count,front_pic')
                    ->where('t.id = ?', $v)
                    ->fetchArray();
                if (!empty($t[0])) {
                    $data[$v] = $t[0];
                }
            }
            if (empty($data)) {
                return false;
            }

            $redis->set($key, serialize($data));
        }

        return $data;
    }

    # TA的晒物
    public function getTaShaiwu($uid = null, $productId = null)
    {
        if (empty($uid)) {
            return false;
        }
        $data = CacheModel::getCache();
        if (empty($data)) {
            $limit = 5;
            $data['ta'] = self::getInstance()->createQuery('t')
                ->select('t.id,t.title,t.front_pic,t.support,t.agaist,t.comment_count')
                ->where('t.author_id = ?', $uid)
                ->andWhere('t.status = ?', 1)
                ->orderBy('t.publish_time desc')
                ->limit($limit)
                ->fetchArray();
            if (!empty($data['ta'])) {
                foreach ($data['ta'] as $k => $v) {
                    if ($v['id'] == $productId) {
                        unset($data['ta'][$k]);
                    }
                }
            }
            $count = count($data['ta']);
            if ($count < $limit) {
                $data['tuijian'] = array_slice(trdShaiwuProductTable::getInstance()->getHotData(), 0, $limit - $count);
            }
            CacheModel::setCache($data, 60);
        }

        return $data;
    }

      /*
   *
   *删除回复同步数量
   **/
    public static function syncComment($id, $replyNum)
    {
        $status = array('status' => false);
        try {
            $shaiwuProduct = trdShaiwuProductTable::getInstance()->find($id);
            $shaiwuProduct->setCommentCount($shaiwuProduct->getCommentCount() - (1 + $replyNum));
            $shaiwuProduct->save();

            $status['status'] = true;
        } catch (Exception $e) {
            $status['msg'] = $e->getCode();
        }

        return $status;
    }


    /*
     *deleteMessage
     **/
    public static function deleteMessage($id)
    {
        try {
            $res = self::getInstance()->find($id);
            $res->setStatus(3);
            $res->save();

            $status = true;
        } catch (Exception $e) {
            $status = false;
        }

        return $status;
    }

    public static function getObjByIds($ids)
    {
        $objs = self::getInstance()
            ->createQuery('t')
            ->where('t.status = 1')
            ->andWhere("t.id in (" . join(",", $ids) . ") ")
            ->orderBy("FIELD(`ID`,".trim(join(",", $ids)) . ')');
        $result = $objs->execute();
        return $result;
    }

}