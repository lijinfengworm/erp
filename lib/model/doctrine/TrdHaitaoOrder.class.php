<?php

/**
 * TrdHaitaoOrder
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-2919:53:27Z jwage $
 */
class TrdHaitaoOrder extends BaseTrdHaitaoOrder
{
    public function getMartOrder()
    {
        return '';
    }

    public function getMartContent()
    {
        return '';
    }

    public function getTransportContent()
    {
        return '';
    }


    public function getCustomsContent()
    {
        return '';
    }

    public function getDomesticContent()
    {
        return '';
    }

    /**
     * 获取商品属性
     * @return mixed
     */
    public function getGoodsAttr()
    {
       $attr =  json_decode($this->getAttr(),1);
       if(isset($attr['price']))
       {
           unset($attr['price']);
       }
        if(isset($attr['name']))
        {
            unset($attr['name']);
        }
        if(isset($attr['img']))
        {
            unset($attr['img']);
        }
       if(!empty($attr))
       {
           return array_filter($attr);
       }
        return array();
    }
	public function getGoodsAttrKey($key)
	{
		$attr =  json_decode($this->getAttr(),1);
		if(isset($attr[$key]))
		{
			return ($attr[$key]);
		}
		return false;
	}
	public function getGoodsAsin()
	{
		$attr =  json_decode($this->getAttr(),1);
		if(isset($attr['name']))
		{
			return ($attr['name']);
		}
		return false;
	}
    public function getFormatDomesticExpress()
    {
        switch($this->getDomesticExpressType()){
            case 0:
                return '申通';
                break;
            case 1:
                return '顺丰';
                break;
            case 2:
                return 'EMS';
                break;
            case 3:
                return '圆通';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatExpressType()
    {
        switch($this->getExpressType()){
            case 0:
                return '申通';
                break;
            case 1:
                return '顺丰';
                break;
            case 2:
                return 'EMS';
                break;
            case 3:
                return '圆通';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatStatusForStorage()
    {

        switch ($this->getStatus()) {
            case '0':
                return '已创建';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
            case '3':
            case '4':
            case '5':
                return '待入库';
                break;
            case '11':
                return '已入库';
                break;
            case '12':
                return '部分商品已入库';
                break;
            case '6':
                return '已出库';
                break;
            case '7':
                return '已完成';
                break;
            case '8':
                return '已取消';
                break;
            case '9':
                return '已退回';
                break;
            case '10':
                return '退款中';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatStatus($status = false)
    {
        $status === false && $status = $this->getStatus();
        switch ($status) {
            case '0':
                return '已创建';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
                return '已下单';
                break;
            case '3':
                return '商家已发货';
                break;
            case '4':
                return '转运公司已发货';
                break;
            case '5':
                return '海关已发货';
                break;
            case '11':
                return '已入库';
                break;
            case '12':
                return '部分商品已入库';
                break;
            case '6':
                return '已发货';
                break;
            case '7':
                return '已完成';
                break;
            case '8':
                return '已取消';
                break;
            case '9':
                return '已退回';
                break;
            case '10':
                return '退款中';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatPayStatus($status = false)
    {
        $status === false && $status = $this->getPayStatus();
        switch ($status) {
            case '0':
                return '待付款';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
                return '待退款';
                break;
            case '3':
                return '退款中';
                break;
            case '4':
                return '退款完成';
                break;
            case '5':
                return '退款失败';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function formatArray() {

        return array(
            'id' =>$this->getId(),
            'order_number' => $this->getOrderNumber(),
            'ibilling_number' => $this->getIbillingNumber(),
            'title' => $this->getTitle(),
            'news_id' => $this->getNewsId(),
            'hupu_uid' => $this->getHupuUid(),
            'goods_id' => $this->getGoodsId(),
            'hupu_username' => $this->getHupuUsername(),
            'address' => $this->getAddress(),
            'attr'=>$this->getAttr(),
            'number' => $this->getNumber(),
            'storage_number' => $this->getStorageNumber(),
            'price' => $this->getPrice(),
            'status'=> $this->getStatus(),
            'format_status'=>$this->getFormatStatus(),
            'domestic_express_type' => $this->getDomesticExpressType(),
            'format_domestic_express' => $this->getFormatDomesticExpress(),
            'express_type' => $this->getExpressType(),
            'format_express_type' => $this->getFormatExpressType()
        );
    }
}
