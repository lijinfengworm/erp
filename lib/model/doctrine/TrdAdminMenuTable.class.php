<?php

/**
 * TrdAdminMenuTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdAdminMenuTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TrdAdminMenuTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdAdminMenu');
    }


    /**
     * 获取全部的数据
     */
    public static function  getAllMenu($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }
        //order
        if (!empty($bind['order'])){
            $data->orderBy($bind['order']);
        } else {
            $data->orderBy('listorder asc,id asc');
        }
        $data =  $data->fetchArray();
       if(!empty($bind['isFormatChild'])) {
           foreach($data as $k=>$v) {
               if(isset($v['child_attr'])) {
                   $data[$k]['child_attr'] = unserialize($v['child_attr']);
               }
           }
       }

        return $data;
    }


    /**
     * 获取某个单独的菜单
     */
    public static function  getOneMenu($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }
        $data =  $data->fetchOne();
        if(empty($data)) return false;
        $data = $data->toArray();
        //如果获取单个字段
        if(!empty($bind['field'])) return $data[$bind['field']];
        return $data;
    }





    /**
     * 获取权限结点
     */
    public static function returnNodes($tree = true,$isFormatChild = false) {
        $nodes = array();
        $list = self::getAllMenu(
            array('select'=>'*',
                'where'=>array('is_public'=>'is_public = 0'),
                'order'=>'listorder asc','isFormatChild'=>$isFormatChild));
        if((int)$tree){
            $nodes = FunBase::list_to_tree($list,$pk='id',$pid='pid',$child='operator',$root=0);
            foreach ($nodes as $key => $value) {
                if(!empty($value['operator'])){
                    $nodes[$key]['child'] = $value['operator'];
                    unset($nodes[$key]['operator']);
                }
            }
        } else {
            foreach($list as $k=>$v) {
                $nodes[$v['id']] = $list[$k];
            }
        }
        return $nodes;
    }







    /**
     * 删除数据
     */
    public static function del_menu($id) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('id = ?',$id)
            ->fetchOne();
        if(empty($data)) return false;
       return  $data->delete();
    }

    /**
     * 排序
     */
    public static function saveListOrder($id,$listorder) {
        return  self::getInstance()->createQuery('m')
            ->update()
            ->set('m.listorder', $listorder)
            ->where('m.id =?', $id)
            ->execute();
    }


    /**
     * 获取全部数据数量
     */
    public static function  getAllMenuCount($bind = array()) {
        $data = self::getInstance()
            ->createQuery('t')
            ->select('count(t.id) as num')
            ->orderBy('t.listorder desc,t.id asc');
        if (!empty($bind['where']['pid'])){
            $data->andWhere('t.pid =?',$bind['where']['pid']);
        }
        $data =  $data->fetchArray();
        return $data[0]['num'];

    }


    /**
     * 通过id 获取child 组
     */
    public static function getChildGroup($pid) {
        $data = self::getInstance()
            ->createQuery()
            ->select('menu_group')
            ->distinct('menu_group')
            ->andWhere("menu_group <> ''")
            ->andWhere("pid = ?",$pid)
            ->fetchArray();
       if(isset($data)) {
           return array_unique(FunBase::DesignateNoKeyArrTwoToOne($data,'menu_group'));
       }
        return false;
    }


    /**
     * 通过id获取一条记录
     */
    public static function getOne($id) {
        $info = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('id = ?',$id)
            ->fetchOne();
        if(empty($info)) return false;
        return $info->toArray();
    }









}