<?php

/**
 * KaluliOrderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class KaluliOrderTable extends Doctrine_Table {

    //仓库类型
    public static $depot_type = array(
        1=>'识货仓库'
    );

    //快递类型
    //0申通 1顺丰 2EMS 3圆通 4韵达 5中通 6天天 7汇通 8宅急送 9其他
    public static $domestic_express_type  = array(
        1=>'申通',
        2=>'顺丰',
        3=>'EMS',
        4=>'圆通',
        5=>'韵达',
        6=>'中通',
        7=>'天天快递',
        8=>'汇通',
        9=>'宅急送',
        33=>'速尔',
        28=>'其他',
    );


    public static $guanyi_express_type = array(
        'default'=>'YTO',
        2=>'SF',
        4=>'YTO'
    );





    //订单状态
    public static $order_status = array(
        0=>'订单生成',
        1=>'已发货',
        2=>'订单完成',
        3=>'退货处理中',
        4=>'待用户发货',
        5=>'卡路里待收货',
        6=>'已退货',
        7=>'订单关闭',
        8=>'用户取消',
        9=>'卡路里取消',
        10=>'拒绝退货',
    );
    //主订单的配置（worm修改，和主订单数据库同步）
    public static $order_status_main = array(
        0=>'待付款',
        1=>'待发货',
        2=>'已发货',
        3=>'待评价',
        4=>'取消',
        5=>'退款成功',
        6=>'交易成功'
    );
    //支付状态
    //0待付款 1已支付 2待退款 3退款中 4退款完成 5退款失败
    public static $order_pay_status = array(
        0=>'待付款',
        1=>'已支付',
        2=>'待退款',
        3=>'退款中',
        4=>'退款完成',
        5=>'退款失败',
    );

    /* 退款中 状态  */
    public static $PAY_STATUS_REFUNDING = 3;

    /*来源渠道*/
    public static $order_from_statuc = array(
        0=>'pc',
        1=>'m站'
    );






    /*
     * 通过orderNubmer 获取当前订单号的所有子订单 并且 join 关联orderattr表
     * 梁天 2015-05-19
     */
    public static function  getOrdersByOrderNubmer($order_number) {
        $connection =Doctrine_Manager::getInstance()->getConnection('kaluli');
        $query = 'SELECT a.*,b.attr,b.refund_price,b.refund_express_fee,b.refund
                  FROM kll_order a
                  LEFT JOIN kll_order_attr b ON a.id = b.order_id
                  WHERE a.`order_number` = ' . $order_number;
        $statement = $connection->execute($query);
        $return = array();
        while ($data = $statement->fetch(PDO::FETCH_ASSOC)) {
            $return[$data['id']] = $data;
        }
        return $return;
    }


    /**
     * 报表统计
     * @param $order_number
     * @param $title
     * @param $start_time
     * @param $end_time
     * @return array|Doctrine_Collection|Doctrine_Collection_OnDemand|int|mixed
     */
    public static function summaryReport($order_number, $title, $start_time, $end_time) {
        $q = self::getInstance()->createQuery()->select('SUM(total_price) as total_price,COUNT(*) as orders,COUNT(*) as number');
        //必须已付款
        $q->andWhere('pay_status > 0');
        //$q->where('pay_status != ?','0');
        if ($order_number)
            $q->andWhere('order_number = ?', $order_number);
        if ($title)
            $q->andWhere('title LIKE ?', '%' . $title . '%');
        if ($start_time)
            $q->andWhere('order_time >= ?', $start_time);
        if ($end_time)
            $q->andWhere('order_time <= ?', $end_time);
        $q->groupBy('source');
        $returnArr =  $q->fetchArray();
        if(!empty($returnArr)) return $returnArr[0];
    }



    /**
     * Returns an instance of this class.
     *
     * @return object KaluliOrderTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('KaluliOrder');
    }

    //0订单生成 1订单完成 2待退货 3已退货 4订单关闭 5用户取消 6识货取消
    public static function showStatus($show_flag,$type = 'string') {
        $string = & self::$order_status;
        $html_one = array(
            0=>'<span class="c-blue">订单生成</span>',
            1=>'<span class="c-green">已发货</span>',
            2=>'<span style="color:#FF0066;">订单完成</span>',
            3=>'<span style="color:#CC0066;">退货处理中</span>',
            4=>'<span style="color:#990066;">待用户发货</span>',
            5=>'<span class="c-ccc">待卡路里收货</span>',
            6=>'<span style="color:#000033;">已退货</span>',
            7=>'<span style="color:#000044;">订单关闭</span>',
            8=>'<span style="color:#000055;">用户取消</span>',
            9=>'<span style="color:#000066;">卡路里取消</span>',
			10=>'<span style="color:#000066;">拒绝退货</span>',
        );
        $type = $$type;
        if(!empty($type[$show_flag])) return $type[$show_flag];
        return false;
    }
    //0订单生成 1订单完成 2待退货 3已退货 4订单关闭 5用户取消 6交易成功
    public static function showMainStatus($show_flag,$type = 'string') {
        $string = & self::$order_status;
        $html_one = array(
            0=>'<span class="c-blue">待付款</span>',
            1=>'<span class="c-green">待发货</span>',
            2=>'<span style="color:#FF0066;">已发货</span>',
            3=>'<span style="color:#CC0066;">待评价</span>',
            4=>'<span style="color:#990066;">订单取消</span>',
            5=>'<span class="c-ccc">退款成功</span>',
            6=>'<span style="color:#000033;">交易成功</span>',
        );
        $type = $$type;
        if(!empty($type[$show_flag])) return $type[$show_flag];
        return false;
    }


    //0待付款 1已支付 2待退款 3退款中 4退款完成 5退款失败
    public static function showPayStatus($show_flag,$type = 'string') {
        $string = & self::$order_pay_status;
        $html_one = array(
            0=>'<span class="c-ccc">待付款</span>',
            1=>'<span class="c-green">已支付</span>',
            2=>'<span style="color:#FF0066;">待退款</span>',
            3=>'<span style="color:#CC0066;">退款中</span>',
            4=>'<span style="color:#990066;">退款完成</span>',
            5=>'<span style="color:#000033;">退款失败</span>',
        );
        $type = $$type;
        if(!empty($type[$show_flag])) return $type[$show_flag];
        return false;
    }

    /**
     * 根据orderNumber获取总价
     * @param $orderNumber
     */
    public static function getTotalPriceByOrderNumber($orderNumber) {
        $data = self::getInstance()->createQuery();
        $data->select("sum(total_price) as all_price")
             ->where("order_number = ?",$orderNumber)
             ->groupBy("order_number");
       $orderPrice = $data->fetchArray();
        return $orderPrice;
    }
    /**
     * 获得已发货的所有子订单
     * @param $status
     */
    public static function getAllOrderByStatus($status = 2) {
        $data = self::getInstance()->createQuery();
        $data->select("*")
             ->where("status < ?",$status)
             ->andWhere("pay_status = ?", 1)
             ->orderBy('pay_time desc');
       $order = $data->fetchArray();
        return $order;
    }
    /**
     * 通过自定义条件获取全部的数据
     * Abuout 梁天
     * ->from('TrdSpecial t')
     *   ->select('name,c.name ffff')->leftJoin('t.TrdSpecialCate c on t.cateid = c.id')
     */
    public static function  getAll($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //leftJoin
        if (!empty($bind['leftJoin'])){
            $data->leftJoin($bind['leftJoin']);
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }

        //whereIn 简单判断  如果复杂 建议新写函数
        if(!empty($bind['whereIn']) && count($bind['whereIn']) > 0) {
            foreach($bind['whereIn'] as $k=>$v) {
                $data->WhereIn($k,$v);
            }
        }

        //order
        if (!empty($bind['order'])){
            $data->orderBy($bind['order']);
        } else {
            $data->orderBy('id desc');
        }
        //limit
        if (!empty($bind['limit'])){
            $data->limit($bind['limit']);
        }

        if(!empty($bind['offset'])) {
            $data->offset($bind['offset']);
        }
        if(!empty($bind['groupBY'])){
            $data->groupBy($bind['groupBY']);
        }
        $data =  $data->fetchArray();
        if(!empty($bind['is_count'])) {
            $data = $data[0]['num'];
        }
        return $data;
    }

    /**
     * 获取一条会员信息
     */
    public static function getOne($id,$is_toarray = true,$field = '') {
        $info = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('id = ?',$id)
            ->fetchOne();
        if(empty($info)) return false;
        if(empty($is_toarray)) return $info;
        $info = $info->toArray();
        if(empty($field)) return $info;
        return $info[$field];
    }


    /*获取订单信息*/
    public static function getOrderinfo($order_number,$product_id = null){
        if(!$order_number) return '';

        $query = self::getInstance()->createQuery()
            ->select('*')
            ->where('order_number = ?',$order_number);
        if($product_id) $query = $query->andWhere('product_id =?',$product_id);
        return $info = $query->fetchOne();
    }


    /*获取交易完成的订单信息*/
    public static function getOrderSuccessinfo($order_number, $product_id, $goods_id, $hupu_uid){
        if(!$order_number || !$product_id || !$goods_id) {
            return false;
        }
        $query = self::getInstance()->createQuery()
            ->where('order_number = ?', $order_number)
            ->addWhere('product_id = ?', $product_id)
            ->addWhere('goods_id = ?', $goods_id)
            ->andWhere('hupu_uid = ?', $hupu_uid)
            ->addWhere('status = 2')
            ->addWhere('pay_status = 1')
            ->addWhere('is_comment = 0');
        return $info = $query->fetchOne();
    }

}