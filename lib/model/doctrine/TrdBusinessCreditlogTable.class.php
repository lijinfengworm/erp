<?php

/**
 * TrdBusinessCreditlogTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdBusinessCreditlogTable extends Doctrine_Table
{
    public static $types = array(
        1=>'调整（增加）',
        2=>'调整（减少）',
        3=>'消费',
        4=>'消费退回',
    );
    /**
     * Returns an instance of this class.
     *
     * @return object TrdBusinessCreditlogTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdBusinessCreditlog');
    }

    public static function houtaGetCount($uid,$type,$day=0)
    {
        $query = self::getInstance()->createQuery();
        $query->andWhere('uid = ?',$uid);
        if('increase' === $type)
        {
            $query->whereIn('type',array(1,4));
        }
        elseif('reduce' === $type)
        {
            $query->whereIn('type',array(2,3));
        }
        elseif(!empty($type))
        {
            $query->andWhere('type = ?',$type);
        }

        if($day == 'before')
        {
            $query->andWhere('date >= ?',strtotime('-3 month'));
        }
        elseif($day == 'after')
        {
            $query->andWhere('date <?',strtotime('-3 month'));
        }
        return $query->count();
    }


    public static function houtaGetList($offset=0,$limit=20,$uid,$type=null,$day=0)
    {
        $query = self::getInstance()->createQuery();
        $query->andWhere('uid = ?',$uid);

        if('increase' === $type)
        {
            $query->whereIn('type',array(1,4));
        }
        elseif('reduce' === $type)
        {
            $query->whereIn('type',array(2,3));
        }
        elseif(!empty($type))
        {
            $query->andWhere('type = ?',$type);
        }

        if($day == 'before')
        {
            $query->andWhere('date >= ?',strtotime('-3 month'));
        }
        elseif($day == 'after')
        {
            $query->andWhere('date <?',strtotime('-3 month'));
        }
        $query->orderBy('id desc')
            ->offset($offset)
            ->limit($limit);
        return $query->fetchArray();
    }
}