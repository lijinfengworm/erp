<?php

/**
 * TrdProductTagTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdProductTagTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TrdProductTagTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdProductTag');
    }
     /**
     * 更新默认tag的order值
     * 
     * @param array $orderedId   tag_id形成的关联数组
     * 
     */
     public static function updateDefaultTagOrder($orderedId) {
        if(empty($orderedId)) return ;
        $sql = '';
        foreach ($orderedId as $id => $ordinal) {
            $sql .= sprintf("WHEN %d THEN %d ", $ordinal, $id);
        }
        
        return self::getInstance()->createQuery()
                ->update()
                ->set('show_order',' CASE id ' . $sql . ' END ')
                ->whereIn('id ', $orderedId)
                ->execute();
    }
    
     public static function myListQuery() {
        $query = self::getInstance()->createQuery('m')
                ->where('m.hidden = 0')
                ->addWhere('m.hot=1')
                ->orderBy('m.show_order asc');
        return $query;
    }
    /*
     * 获取tag objects
     */
    public static function getTagsByIds($ids) {
        if (empty($ids)) return null;
        $query = self::getInstance()->createQuery('t')
                ->whereIn('t.id', $ids);
        return self::commonQuery($query)->execute();
    }
    public static function commonQuery(Doctrine_Query $query) {
        return $query->andWhere($query->getRootAlias() . '.hidden = 0');
    }
     /*
     * 获取一个tag object 
     */
    public static function getTag($id){
        $query = self::getInstance()->createQuery('t')
                ->where('t.id =?', $id);
        return self::commonQuery($query)->fetchOne();
    }
    
     /*
     * @return Doctrine_collections
     */
    public static function getDefaultNormalUseTags(){
        $query = self::getInstance()->createQuery('t')
                ->where('t.hot = 1')
                ->orderBy('t.show_order, t.id desc');
        return self::commonQuery($query)->execute();
    }

    /*
     * 根据tag名称找到对应的tagid 没有则添加这个tag
     * names tag 名称 array
     * category 分类名
     * autoSave  没有是否添加这个tag
     */
    public static function getTagIdsByNamesAndCategory($names, $autoSave = true) {
        if (empty($names))
            return null;
        $arr = array();
        
        if($autoSave)
        {   //保存不存在的tag
            foreach ($names as $name) {
                $tags = self::getTagByNameAndCategory($name,TRUE);
            }
        }
        $tags = self::getInstance()->getSomeTagsObjByNames($names);
        foreach ($tags as $tag)
        {
            $arr[] = $tag->getId();
        }
        return $arr;
    }
    
    /**
     * 根据tag名称 和 分类 获取这个tag 没有的换 看情况保存 
     * @param type $name
     * @param type $category
     * @param type $autoSave
     * @return \voiceTag
     */
    public static function getTagByNameAndCategory($name,$autoSave = true) {
        $tag = self::getInstance()->createQuery('t')
            ->where('t.name =?', $name);
        $tag = $tag->fetchOne();
        //当tag不存在 且指定了 分类  才会去保存
        if (empty($tag) && $autoSave) {
            $tag = new TrdProductTag();
            $tag->setName($name);
            $tag->setHidden(0);
            $tag->save();
        }
        return $tag;
    }
    
    public function getSomeTagsObjByNames($names)
    {
        if(empty($names))
        {
            return array();
        }
        $names = array_filter($names);
        
        $tag = self::getInstance()->createQuery()->wherein('name',$names);
        $messages = $tag->execute();
        $result = array();
        foreach($messages as $message)
        {
            $result[$message['id']] = $message;
        }
        return $result;
    }
    public function getSomeTagsObjByIds($ids)
    {
        if(empty($ids))
        {
            return array();
        }
        $ids = array_filter($ids);
        
        $tag = self::getInstance()->createQuery()->wherein('id',$ids);
        $messages = $tag->execute();
        $result = array();
        foreach($messages as $message)
        {
            $result[$message['id']] = $message;
        }
        return $result;
    }
}