<?php

/**
 * TrdAccountHistoryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdAccountHistoryTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TrdAccountHistoryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdAccountHistory');
    }

    public static function getSigninDay($hupuUid)
    {
        $time = date('Y-m-d 00:00:00');
        $stime = date('Y-m-d 00:00:00');
        $etime = date('Y-m-d H:i:s',strtotime('-7 day',strtotime($stime)));

        $query = self::getInstance()
            ->createQuery('t')
            ->select('t.created_at as created_at')
            ->where('t.category = 4')
            ->addwhere('t.hupu_uid = ?',$hupuUid)
            ->addwhere('t.created_at >= ?',$etime)
            ->addwhere('t.created_at < ?',$stime)
            ->orderBy('t.created_at desc')
            ->execute();

        $day = 0;
        for($i=0;$i<7;$i++)
        {
            $si = $i;
            $ei = $i+1;
            $stime = strtotime("-$si day",strtotime($time));
            $etime = strtotime("-$ei day",strtotime($time));
            $signtime = strtotime($query[$i]->getCreatedAt());

            if($signtime > $etime && $signtime < $stime )
            {
                $day++;
            }else{
                break;
            }
        }
        return $day;
    }

    public static function isSigninToday($hupuUid)
    {
        $stime = date('Y-m-d 00:00:00');
        $etime = date('Y-m-d H:i:s',strtotime('+1 day', strtotime($stime)));

        $query = self::getInstance()
            ->createQuery('t')
            ->select('COUNT(1) as num')
            ->where('t.category = 4')
            ->addwhere('t.hupu_uid = ?',$hupuUid)
            ->addwhere('t.created_at >= ?',$stime)
            ->addwhere('t.created_at < ?',$etime)
            ->orderBy('t.created_at desc')
            ->fetchOne();
        if($query->getNum())
        {
            return true;
        }else{
            return false;
        }
    }


    public static function isHaitaoSigninToday($hupuUid)
    {
        $stime = date('Y-m-d 00:00:00');
        $etime = date('Y-m-d H:i:s',strtotime('+1 day', strtotime($stime)));

        $query = self::getInstance()
            ->createQuery('t')
            ->where('t.category = 12')
            ->addwhere('t.hupu_uid = ?',$hupuUid)
            ->addwhere('t.created_at >= ?',$stime)
            ->addwhere('t.created_at < ?',$etime)
            ->orderBy('t.created_at desc')
            ->limit(1)
            ->fetchOne();

        if($query)
        {
            return true;
        }else{
            return false;
        }
    }

    public static function isChristmas2015Today($hupuUid)
    {
        $stime = date('Y-m-d 00:00:00');
        $etime = date('Y-m-d H:i:s',strtotime('+1 day', strtotime($stime)));

        $query = self::getInstance()
            ->createQuery('t')
            ->where('t.category = ?', 19)//圣诞活动
            ->addwhere('t.hupu_uid = ?',$hupuUid)
            ->addwhere('t.created_at >= ?',$stime)
            ->addwhere('t.created_at < ?',$etime)
            ->orderBy('t.created_at desc')
            ->limit(1)
            ->fetchOne();

        if($query)
        {
            return true;
        }else{
            return false;
        }
    }

    public static function getSumIGByCateTime($hupuUid,$categorys=array(),$stime="",$etime="",$type)
    {
        if(empty($categorys))
        {
            return fasle;
        }
        $query = self::getInstance()->createQuery('t')
            ->select('SUM(t.integral) as integral,SUM(t.gold) as gold')
            ->where('t.hupu_uid = ?',$hupuUid)
            ->andWhere('t.type = ?',$type)
            ->andWhere('t.category IN ('.join(",", $categorys).')');

        if($stime)
        {
            $query->andWhere("t.created_at >= ?",$stime);
        }

        if($etime)
        {
            $query->andWhere('t.created_at < ?',$etime);
        }

        $result = $query->fetchOne();
        $return = array();
        $return['integral'] = $result->getIntegral();
        $return['gold'] = $result->getGold();

        return $return;
    }

    public static function getHistoryByActionid($hupuUid,$actionid,$categorys = array(),$type=0)
    {
        $query = self::getInstance()
            ->createQuery('t')
            ->andWhere('t.type = ?',$type)
            ->addwhere('t.hupu_uid = ?',$hupuUid)
            ->addwhere('t.actionid = ?',$actionid);

        if($categorys)
        {
            $query->andWhere('t.category IN ('.join(",", $categorys).')');
        }

        return  $query->fetchOne();
    }

    public static function  getHistoryByUid($hupuUid,$categorys=array(),$types= array(),$stime="",$etime="",$limit=20 ,$page= 1, $cache = false)
    {
        $page = $page -1;
        $query = self::getInstance()->createQuery('t')
            ->where('t.hupu_uid = ?',$hupuUid)
            ->orderBy("t.created_at desc");

        if($cache){
            $query->setResultCacheLifeSpan( 60*2 )
                  ->useResultCache();
        }

        if($categorys)
        {
            $query->andWhere('t.category IN ('.join(",", $categorys).')');
        }

        if($types)
        {
            $query->andWhere('t.type IN ('.join(",", $types).')');
        }

        if($stime)
        {
            $query->andWhere("t.created_at >= ?",$stime);
        }

        if($etime)
        {
            $query->andWhere('t.created_at <= ?',$etime);
        }

        $query->limit($limit);
        $query->offset($limit*$page);
        $query->orderBy("t.created_at desc");
        return  $query->execute();
    }

    public static function  getHistoryByCategory($categorys,$userId,$stime="",$etime="",$limit=25,$page=1)
    {
        $page = $page -1;
        $query = self::getInstance()->createQuery('t')
            ->orderBy("t.created_at desc");

        if($userId)
        {
            $query->where('t.hupu_uid =?',$userId);
        }

        if($categorys && is_array($categorys))
        {
            $query->andWhere('t.category IN ('.join(",", $categorys).')');
        }

        if($categorys && is_numeric($categorys))
        {
            $query->andWhere('t.category = ?',$categorys);
        }

        if($stime)
        {
            $query->andWhere("t.created_at >= ?",$stime);
        }

        if($etime)
        {
            $query->andWhere('t.created_at <= ?',$etime);
        }

        $query->limit($limit);
        $query->offset($limit*$page);
        $query->orderBy("t.created_at desc");
        return  $query->execute();
    }


    public static function  getHistoryCountByUid($hupuUid,$categorys=array(),$types= array(),$stime="",$etime="",$count = false)
    {
        $query = self::getInstance()->createQuery('t')
            ->select("count(*) AS total")
            ->where('t.hupu_uid = ?',$hupuUid)
            ->orderBy("t.created_at desc");

        if($categorys)
        {
            $query->andWhere('t.category IN ('.join(",", $categorys).')');
        }

        if($types)
        {
            $query->andWhere('t.type IN ('.join(",", $types).')');
        }

        if($stime)
        {
            $query->andWhere("t.created_at >= ?",$stime);
        }

        if($etime)
        {
            $query->andWhere('t.created_at <= ?',$etime);
        }

        if($count){
            return  $query->count();
        }else{
            return  $query->fetchOne();
        }

    }

    # 获取晒物金币和积分
    public static function getShaiwuByUid($uid=null)
    {
        $data = CacheModel::getCache();
        if( empty($data) )
        {
            $tmp = self::getInstance()->createQuery('t')
                ->select("sum(integral) AS integral,sum(gold) AS gold")
                ->where('t.hupu_uid = ?', $uid)
                ->andWhere('t.category = 13')
                ->fetchArray();
            $data = $tmp[0];
            if (empty($data['integral']) && empty($data['gold'])) {
                return;
            }
            CacheModel::setCache($data,30);
        }
        return $data;
    }

}