<?php

/**
 * KllActivitySetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class KllActivitySetTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object KllActivitySetTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('KllActivitySet');
    }

    //判断是否有重复的卡
    public static function isRepeat($key) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('key = ?',$key)
            ->fetchOne();
        if(empty($data)) return false;
        return true;
    }


    /**
     * 修改状态
     */
    public static function updateStatus($id,$status = 0) {
        $news = self::getInstance()->find($id);
        $news->setStatus($status);
        return $news->save();

    }

    /**
     * 获取全部的数据
     */
    public static function  getAll($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }
        //order
        if (!empty($bind['order'])){
            $data->orderBy($bind['order']);
        } else {
            $data->orderBy('id desc');
        }

        //limit
        if (!empty($bind['limit'])){
            $data->limit($bind['limit']);
        }

        if(!empty($bind['offset'])) {
            $data->offset($bind['offset']);
        }
        $data =  $data->fetchArray();
        if(!empty($bind['is_count'])) {
            $data = $data[0]['num'];
        }
        return $data;
    }


    //after save
    public static function _after_save($id) {
        if(empty($id)) return true;
        $ids = array();
        //先计算指定增加id
        if(!empty($_POST['roles']['add_id'])) {
            $_POST['roles']['add_id'] = trim($_POST['roles']['add_id']);
            if (substr($_POST['roles']['add_id'], -1) == ',') {
                $_POST['roles']['add_id'] = rtrim($_POST['roles']['add_id'], ',');
            }
            $ids = explode(',', trim($_POST['roles']['add_id']));
        }
        //判断是否查tag
        if(!empty($_POST['roles']['tag']) && count($_POST['roles']['tag']) > 0) {
            foreach($_POST['roles']['tag'] as $k=>$v) {
                $_id = KaluliTagsRelateTable::getByTagIdToPid($v,1,'pid');
                foreach($_id as $j=>$r) {
                    echo $r['pid'].'<br />';
                    array_push($ids,$r['pid']);
                }
            }
        }
        //判断是否有减id
        if(!empty($_POST['roles']['remove_id'])) {
            $_POST['roles']['remove_id'] = trim($_POST['roles']['remove_id']);
            if (substr($_POST['roles']['remove_id'], -1) == ',') {
                $_POST['roles']['remove_id'] = rtrim($_POST['roles']['remove_id'], ',');
            }
            $_remove_ids = explode(',', trim($_POST['roles']['remove_id']));

            $ids = array_flip($ids);
            foreach ($_remove_ids as $k => $v) {
                if (isset($ids[$v])) unset($ids[$v]);
            }
            $ids = array_flip($ids);
        }
        //规则key
        $_role_key = 'kll.activity.role.'.$id;
        //数据key
        $_data_key = 'kll.activity.goods.'.$id;

        $_find = KllActivitySetTable::getInstance()->find($id);

        $_version = $_find->getVersion();
        $_find->setStatus(1);
        $_find->setKey($_data_key);
        $_find->save();
        //写入redis
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(9);
        $redis->del($_role_key);
        $redis->del($_data_key);
        foreach($ids as $k=>$v) {
            $redis->sadd($_data_key, $v);
        }
        $redis->set($_role_key,json_encode($_POST['roles']));

        //同步集合 活动关联表
        $marketingActivityTable = KllMarketingActivityTable::getInstance();
        $marketingActivityTable->createQuery()
            ->where('group_id = ?',$id)
            ->update()
            ->set('new_version ',$_version)
            ->execute();
        return true;
    }




}