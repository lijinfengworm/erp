<?php

/**
 * TrdOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TrdOrder extends BaseTrdOrder
{
    /**
     * 获取商品属性
     * @return mixed
     */
    public function getGoodsAttr()
    {
       $attr =  json_decode($this->getAttr(),1);
       if(isset($attr['price']))
       {
           unset($attr['price']);
       }
        if(isset($attr['name']))
        {
            unset($attr['name']);
        }
        if(isset($attr['img']))
        {
            unset($attr['img']);
        }
       if(!empty($attr))
       {
           return array_filter($attr);
       }
        return array();
    }
	public function getGoodsAttrKey($key)
	{
		$attr =  json_decode($this->getAttr(),1);
		if(isset($attr[$key]))
		{
			return ($attr[$key]);
		}
		return false;
	}
	public function getGoodsAsin()
	{
		$attr =  json_decode($this->getAttr(),1);
		if(isset($attr['name']))
		{
			return ($attr['name']);
		}
		return false;
	}
    public function getFormatDomesticExpress()
    {
        switch($this->getDomesticExpressType()){
            case 0:
                return '申通';
                break;
            case 1:
                return '顺丰';
                break;
            case 2:
                return 'EMS';
                break;
            case 3:
                return '圆通';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatExpressType()
    {
        switch($this->getExpressType()){
            case 0:
                return '申通';
                break;
            case 1:
                return '顺丰';
                break;
            case 2:
                return 'EMS';
                break;
            case 3:
                return '圆通';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatStatusForStorage()
    {

        switch ($this->getStatus()) {
            case '0':
                return '已创建';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
            case '3':
            case '4':
            case '5':
                return '待入库';
                break;
            case '11':
                return '已入库';
                break;
            case '12':
                return '部分商品已入库';
                break;
            case '6':
                return '已出库';
                break;
            case '7':
                return '已完成';
                break;
            case '8':
                return '已取消';
                break;
            case '9':
                return '已退回';
                break;
            case '10':
                return '退款中';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatStatus($status = false)
    {
        $status === false && $status = $this->getStatus();
        switch ($status) {
            case '0':
                return '订单生成';
                break;
            case '1':
                return '识货下单';
                break;
            case '2':
                return '订单完成';
                break;
            case '3':
                return '待退货';
                break;
            case '4':
                return '已退货';
                break;
            case '5':
                return '订单关闭';
                break;
            case '6':
                return '用户取消';
                break;
            case '7':
                return '识货取消';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatSource($source = false)
    {
        $source === false && $source = $this->getSource();
        switch ($source) {
            case '0':
                return 'PC';
                break;
            case '1':
                return 'M站';
                break;
            case '2':
                return '一键购';
                break;
            case '3':
                return '安卓';
                break;
            case '4':
                return 'IOS';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function getFormatPayStatus($status = false)
    {
        $status === false && $status = $this->getPayStatus();
        switch ($status) {
            case '0':
                return '待付款';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
                return '待退款';
                break;
            case '3':
                return '退款中';
                break;
            case '4':
                return '退款完成';
                break;
            case '5':
                return '退款失败';
                break;
            case '6':
                return '退款已发起';
                break;
            default:
                return '未知状态';
                break;
        }
    }
    public function formatArray() {

        return array(
            'id' =>$this->getId(),
            'order_number' => $this->getOrderNumber(),
            'ibilling_number' => $this->getIbillingNumber(),
            'title' => $this->getTitle(),
            'news_id' => $this->getNewsId(),
            'hupu_uid' => $this->getHupuUid(),
            'goods_id' => $this->getGoodsId(),
            'hupu_username' => $this->getHupuUsername(),
            'address' => $this->getAddress(),
            'attr'=>$this->getAttr(),
            'number' => $this->getNumber(),
            'storage_number' => $this->getStorageNumber(),
            'price' => $this->getPrice(),
            'status'=> $this->getStatus(),
            'format_status'=>$this->getFormatStatus(),
            'domestic_express_type' => $this->getDomesticExpressType(),
            'format_domestic_express' => $this->getFormatDomesticExpress(),
            'express_type' => $this->getExpressType(),
            'format_express_type' => $this->getFormatExpressType()
        );
    }
    public function getOrderStatus(){
        if ($this->getStatus() == 0 && $this->getPayStatus() == 0){
            echo '待付款';
        } else if($this->getStatus() == 0 && $this->getPayStatus() == 1){
            echo '待发货';
        } else if($this->getStatus() == 1 && $this->getPayStatus() == 1){
            if($this->getMartExpressNumber()){
                echo '待收货';
            } else {
                echo '待发货';  
            }
        } else if($this->getStatus() == 2 && $this->getPayStatus() == 1){
            echo '交易完成';
        } else if($this->getPayStatus() == 2 || $this->getPayStatus() == 3 || $this->getPayStatus() == 5){
            echo '待退款';
        } else if($this->getPayStatus() == 4){
            echo '订单关闭';
        } else if(($this->getStatus() == 6 || $this->getStatus() == 7) && $this->getPayStatus() == 0){
            echo '订单取消';
        } 
    }

    public function getOrderStatusInfo(){
        $str = '';
        if ($this->getStatus() == 0 && $this->getPayStatus() == 0){
            $str = '待付款';
        } else if($this->getStatus() == 0 && $this->getPayStatus() == 1){
            $str = '待发货';
        } else if($this->getStatus() == 1 && $this->getPayStatus() == 1){
            if($this->getMartExpressNumber()){
                $str = '待收货';
            } else {
                $str = '待发货';
            }
        } else if($this->getStatus() == 2 && $this->getPayStatus() == 1){
            $str = '交易完成';
        } else if($this->getPayStatus() == 2 || $this->getPayStatus() == 3 || $this->getPayStatus() == 5){
            $str = '待退款';
        } else if($this->getPayStatus() == 4){
            $str = '订单关闭';
        } else if(($this->getStatus() == 6 || $this->getStatus() == 7) && $this->getPayStatus() == 0){
            $str = '订单取消';
        }
        return $str;
    }

     public function save(Doctrine_Connection $conn = null) 
    {
        $modifiedFields = $this->getModified(true);
        parent::save($conn);
        //同步主表状态
        $syncAskKeyArray =array('mart_express_number');
        if(!$this->isNew() && array_intersect($syncAskKeyArray,array_keys($modifiedFields)))
        {
            $this->syncMainOrderStatus();
            //发货 结算订单有效
            $message = array('order_number'=>$this->getOrderNumber(), 'sub_order_number'=>$this->getId(), 'type'=>'delivery');
            tradeCommon::sendMqMessage('order.detail',$message,'order_detail_deferred');
        }
        $syncAskKeyArray1 =array('pay_status','is_comment');
        if(!$this->isNew() && array_intersect($syncAskKeyArray1,array_keys($modifiedFields)))
        {
            if($this->getPayStatus() == 2){
                $this->syncMainOrderPayStatus();//付完款 同步待收货的状态
            }
            if($this->getIsComment() == 1){
                $this->syncMainOrderIsComment();//评价晚 同步已完成的状态
            }
        }
        $syncAskKeyArray2 =array('status');
        if(!$this->isNew() && array_intersect($syncAskKeyArray2,array_keys($modifiedFields)))
        {
            if(($this->getStatus() == 6 || $this->getStatus() == 7) && !$this->getMartExpressNumber()){//订单取消
                $message = array('order_number'=>$this->getOrderNumber(), 'type'=>'cancel');
                tradeCommon::sendMqMessage('order.detail',$message,'order_detail_deferred');
            }
        }
        
        //商城下单数据同步
        $syncAskKeyArray2 =array('mart_order_number','refund');
        if(!$this->isNew() && array_intersect($syncAskKeyArray2,array_keys($modifiedFields)))
        {
            $message = array('order_number'=>$this->getOrderNumber(), 'mart_order_number'=>$this->getMartOrderNumber(), 'type'=>'martOrder');
            tradeCommon::sendMqMessage('order.martOrder',$message,'order_mart_deferred');
        }
        return $this->getId();
        
    }

    private function syncMainOrderStatus(){
        $result = TrdOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('mart_express_number is null or mart_express_number =""')->andWhere('pay_status = 1')->execute();
        if (count($result)==0){
            $mainObj = TrdMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
            $mainObj->setStatus(2);
            $mainObj->save();
        }
        return true;
    }
    private function syncMainOrderPayStatus(){
        $result = TrdOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('pay_status = 1')->execute();
        if (count($result)==0){
            $mainObj = TrdMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
            $mainObj->setStatus(5);
            $mainObj->save();
        }
        return true;
    }
    private function syncMainOrderIsComment(){
        $result = TrdOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('pay_status = 1')->andWhere('is_comment = 0')->execute();
        if (count($result)==0){
            $mainObj = TrdMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
            $mainObj->setStatus(3);
            $mainObj->save();
        }
        return true;
    }
}
