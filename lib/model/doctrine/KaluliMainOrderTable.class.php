<?php

/**
 * KaluliMainOrderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class KaluliMainOrderTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object KaluliMainOrderTable
     */
    //订单状态
    public static $order_status = array(
        0=>'待付款',
        1=>'待发货',
        2=>'已发货',
        3=>'待评价',
        4=>'订单取消',
        5=>'退款成功',
        6=>'交易完成',
    );
    
    public static function getInstance()
    {
        return Doctrine_Core::getTable('KaluliMainOrder');
    }

    public static function showStatus($show_flag,$type = 'string') {
        $string = & self::$order_status;
        $html_one = array(
            0=>'<span class="c-blue">待付款</span>',
            1=>'<span class="c-green">待发货</span>',
            2=>'<span style="color:#FF0066;">已发货</span>',
            3=>'<span style="color:#CC0066;">待评价</span>',
            4=>'<span style="color:#990066;">订单取消</span>',
            5=>'<span class="c-ccc">退款成功</span>',
            6=>'<span style="color:#000033;">交易完成</span>',
        );
        $type = $$type;
        if(!empty($type[$show_flag])) return $type[$show_flag];
        return false;
    }

    /**
     * 新用户送礼
     */
    public static function getNewUserOrder($uid = '',$type = 'all') {
        if(empty($uid)) return false;
        #判断是否开启了
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(9);
        $_key = 'kaluli.act.neworder';
        $data = $redis->get($_key);
        if(empty($data)) return false;
        $_sku = json_decode($data,true);
        if(time()  < $_sku['stime'] ||  time() > $_sku['etime']) return false;


        #判断是否可以免费
        $serviceRequest = new kaluliServiceClient();
        $serviceRequest->setMethod('order.check.user.orders');
        $serviceRequest->setVersion('1.0');
        $serviceRequest->setApiParam('uid', $uid);
        $response = $serviceRequest->execute();
        $isorder = $response->getData();
        //如果都判断通过了  那么就表示是新用户

        if($response->hasError() ||  $isorder['data']['isemptyorder'] == 0) return false;
        //if($response->hasError()) return false;
        if($type == 'all') {
            $skudata['sku'] = KaluliItemSkuTable::getInstance()->getSkuById($_sku['skuid']);
            $skudata['item'] = KaluliItemTable::getInstance()->getOne($skudata['sku']['item_id']);
            return $skudata;
        } else if($type = 'small') {
            return $_sku;
        }
        return false;
    }

    //根据子订单获得父订单
    static function  getOrderByChildOrderID($bind = []){
        $sql = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $sql->select($bind['select']);
        } else {
            $sql->select("*");
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $sql->addWhere($v);
            }
        }
        $data =  $sql->fetchOne();
        return $data;
    }
    //查询主订单
    public static function  getAll($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //leftJoin
        if (!empty($bind['leftJoin'])){
            $data->leftJoin($bind['leftJoin']);
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }

        //whereIn 简单判断  如果复杂 建议新写函数
        if(!empty($bind['whereIn']) && count($bind['whereIn']) > 0) {
            foreach($bind['whereIn'] as $k=>$v) {
                $data->WhereIn($k,$v);
            }
        }

        //order
        if (!empty($bind['order'])){
            $data->orderBy($bind['order']);
        } else {
            $data->orderBy('id desc');
        }
        //limit
        if (!empty($bind['limit'])){
            $data->limit($bind['limit']);
        }

        if(!empty($bind['offset'])) {
            $data->offset($bind['offset']);
        }
        if(!empty($bind['groupBY'])){
            $data->groupBy($bind['groupBY']);
        }
        $data =  $data->fetchArray();
        if(!empty($bind['is_count'])) {
            $data = $data[0]['num'];
        }
        return $data;
    }
    

}