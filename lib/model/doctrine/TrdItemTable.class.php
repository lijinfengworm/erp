<?php

/**
 * TrdItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdItemTable extends Doctrine_Table
{
    const HIDE = 1;
    const SHOW = 0;
    
    const STATUS_NORMAL = 0;
    const STATUS_BANNED = 1;
    const STATUS_BANNED_PERMANENT = 2;        
    /**
     * Returns an instance of this class.
     *
     * @return object TrdItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdItem');
    }
    
    public function getAll()
    {
      return self::getInstance()->createQuery()
              ->where('user_id != 0')
              ->orderBy("id desc");
    }

    public function getVerifiedShoes($limit = 21) {
        return self::getInstance()
            ->createQuery()
            ->select('t.id, t.item_id, t.name, t.title, t.price, t.url, t.freight_payer, b.name, t.img_url, t.click_count, t.is_verified, c.name, t.style_ids, b.name, b.id, t.sold_count')
            ->from('TrdItem t')
            ->leftJoin('t.Brand b')
            ->leftJoin('t.Category c')
            ->where('t.is_hide = ?', TrdItemTable::SHOW)
            ->addWhere("is_verified = ?", 1)
            ->andWhere('t.status = ?', TrdItemTable::STATUS_NORMAL)
            ->groupby('t.item_id')
            ->limit($limit)
            ->orderBy('t.rank desc')
            ->execute();
    }

    //统计个数
    public function countAll() {
        return self::getInstance()->createQuery()
            ->andwhere('is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('is_soldout = 0')
            ->andWhere('status = ?', TrdItemTable::STATUS_NORMAL)
            ->count();
    }

    //按品牌统计个数
    public function countByBrandId($id) {
        return self::getInstance()->createQuery()
            ->where('brand_id = ?', $id)
            ->andwhere('is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('is_soldout = 0')
            ->andWhere('status = ?', TrdItemTable::STATUS_NORMAL)
            ->count();
    }

    //按name统计个数
    public function countByName($name) {
        $name  = trim($name);
        return self::getInstance()->createQuery()
            ->where("name like '%$name%' or title like '%$name%'")
            ->andwhere('is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('is_soldout = 0')
            ->andWhere('status = ?', TrdItemTable::STATUS_NORMAL)
            ->count();
    }

    //按item_id查找
    public function getByItemId($item_id) {
        return self::getInstance()->createQuery()
            ->where('item_id = ?', $item_id)
            ->execute();
    }

    public function toggleAllItemsByUser($userId, $visibility)
    {
        $items = TrdUserItemTable::getInstance()->getByUid($userId);
        $ids = array();
        $item_ids = array();
        foreach($items as $item) {
            if($item->getItemId()) {
                $ids[] = $item->getItemId();
            }
            if($item->getItemAllId()) {
                $item_ids[] = $item->getItemAllId();
            }
        }

        $id_str = join(", ", $ids);
        $item_id_str = join(", ", $item_ids);
        
        //同步隐藏trd_items_all中的商品
        TrdItemAllTable::getInstance()->createQuery()
            ->update()
            ->set('is_hide', '?', $visibility)
            ->where("id in ($item_id_str)")
            ->execute();

        return self::getInstance()->createQuery()
            ->update()
            ->set('is_hide', '?', $visibility)
            ->where("id in ($id_str)")
            ->execute();
    }
    
    public function toggleAllItemsByShop($shopId, $visibility)
    {
        //同步隐藏trd_items_all中的商品
        TrdItemAllTable::getInstance()->createQuery()
              ->update()
              ->set('is_hide', '?', $visibility)
              ->where('shop_id = ?', $shopId)
              ->execute(); 
      return self::getInstance()->createQuery()
              ->update()
              ->set('is_hide', '?', $visibility)
              ->where('shop_id = ?', $shopId)
              ->execute();      
    }
    
    public function showAllItemsByShop($shopId)
    {
      return $this->toggleAllItemsByShop($shopId, self::SHOW);
    }
    
    public function hideAllItemsByShop($shopId)
    {
      return $this->toggleAllItemsByShop($shopId, self::HIDE);
    }
    
    public function showAllItemsByUser($userId)
    {
      return $this->toggleAllItemsByUser($userId, self::SHOW);      
    }
    
    public function hideAllItemsByUser($userId)
    {
      return $this->toggleAllItemsByUser($userId, self::HIDE);      
    }
    
    public function banItem($itemId)
    {
      Doctrine_Query::create()
              ->update('TrdItemAll m')
              ->set('m.status', self::STATUS_BANNED)
              ->where('m.shoe_id = ?', (int)$itemId)
              ->execute();
      return Doctrine_Query::create()
              ->update('TrdItem t')
              ->set('t.status', self::STATUS_BANNED)
              ->where('t.id = ?', (int)$itemId)
              ->execute();
    }
    
    public function unbanItem($itemId)
    {
      Doctrine_Query::create()
              ->update('TrdItemAll m')
              ->set('m.status', self::STATUS_NORMAL)
              ->where('m.shoe_id = ?', (int)$itemId)
              ->execute();
      return Doctrine_Query::create()
              ->update('TrdItem t')
              ->set('t.status', self::STATUS_NORMAL)
              ->where('t.id = ?', (int)$itemId)
              ->execute();
    }             
    
    public function getItemsForRefresh($limit,$id,$large)
    {
      return self::getInstance()
              ->createQuery()
              ->select()
              ->where('id '.($large == 1 ? '>':'<' ) . ' ?' ,$id)
              ->addwhere('status = 0')
              ->limit($limit)
              ->addOrderBy('id desc')->execute();
    }

    //查找没有标题的商品
    public function getItemsNoTitle($limit = 1000) {
      return self::getInstance()
              ->createQuery()
              ->where('title = ""')
              ->limit($limit)
              ->execute();                                                        
    }

    public function getItemsAll($from = 0, $limit = 1000) {
      return self::getInstance()
              ->createQuery()
              ->where('id >= ?', $from)
              ->limit($limit)
              ->execute();                                                        
    }

    public function doUniqueItem($item) {
        $item_keep = $this->getByItemAndUidAll($item->getItemId(), $item->getUserId());
        /*
        $count = self::getInstance()->createQuery()
            ->delete()
            ->where("item_id = ?", $item->getItemId())
            ->andWhere("user_id = ?", $item->getUserId())
            ->andWhere("id != ?", $item_keep->getId())
            ->count();

        $str = "{ id: " . $item->getId() . " } -- ";
        $str .= "{ item_id: " . $item->getItemId() . " } -- ";
        $str .= "{ keep_id: " . $item_keep->getId() . " } -- ";
        $str .= "{ deleted_count : " . $count . " } -- ";
        $str .= "\n";
        syslog($str);
         */

        self::getInstance()->createQuery()
            ->delete()
            ->where("item_id = ?", $item->getItemId())
            ->andWhere("user_id = ?", $item->getUserId())
            ->andWhere("id != ?", $item_keep->getId())
            ->execute();
    }

    public function getdisplayedItem(Doctrine_Query $q = null)
    {
        if(is_null($q))
        { 
            $q = self::getInstance()->createQuery('TrdItem i');
        }
        $q->addWhere('i.status = 0');
        $q->addWhere('i.is_soldout = 0');
        return $q->execute();
    }

    //查找用户发布的商品（全部）
    public function getByItemAndUidAll($item_id, $uid) {
        return self::getInstance()->createQuery()
            ->where("item_id = ?", $item_id)
            ->andwhere('user_id = ?', $uid)
            ->orderby("is_verified desc, created_at desc")
            ->fetchOne();
    }

    //按item_id查找
    public function get_by_itemid($item_id) {
        return self::getInstance()->createQuery()
            ->where('item_id = ?', $item_id)
            ->andwhere('is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('status = ?', TrdItemTable::STATUS_NORMAL)
            ->orderby("is_verified desc, created_at desc")
            ->fetchOne();
    }

    public function getById($id) {
        return self::getInstance()->createQuery()
            ->where('id = ?', $id)
            ->andwhere('is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('status = ?', TrdItemTable::STATUS_NORMAL)
            ->orderby("is_verified desc, created_at desc")
            ->fetchOne();
    }
}
