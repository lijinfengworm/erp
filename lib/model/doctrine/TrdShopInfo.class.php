<?php

/**
 * TrdShopInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TrdShopInfo extends BaseTrdShopInfo
{
    private static $redis_obj = null;
    function getUserInfo() {
        //todo cache
        if($this->getHupuUid()) {
            //static $redis = null;
            if (self::$redis_obj == null){
                self::$redis_obj = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
            }
            $key = 'trd_shop_hupu_userinfo_'.$this->getHupuUid();
            $data = self::$redis_obj->get($key);
            if ($data) {
                $rs = unserialize($data);
            } else {
                $args = array("uid" => $this->getHupuUid());
                $rs = SnsInterface::getContents("getuserbaseinfo", "84", "62c7c5ccd161d52", $args, 'GET');

                $rs["username"] = mb_convert_encoding($rs["username"], "utf-8", "gbk");
                if ($rs) self::$redis_obj->set($key, serialize($rs), 6*24*60*60);
            }
            return $rs;
        }

        return false;
    }

    function getGoLink() {
        sfProjectConfiguration::getActive()->loadHelpers('TrdLink');

        if($this->getOwnerName()) {
            $name = $this->getOwnerName();
        } else {
            $name = "";
        }

        return shop_go_link($this->getLink(), $name);
    }

    public function postInsert($event)
    {
//        $position = (int) $this->getPosition();
//        $shopCategoryId = $this->getShopCategoryId();
//        $id = $this->getId();
//        $isExists = TrdShopInfoTable::getInstance()->createQuery()
//            ->where('shop_category_id = ?', $shopCategoryId)
//            ->addWhere('id != ?', $id)
//            ->addWhere('position = ?', $position)
//            ->count();
//        if ($isExists) {
//            $shops = TrdShopInfoTable::getInstance()->createQuery()
//                ->select('id, position')
//                ->where('shop_category_id = ?', $shopCategoryId)
//                ->addWhere('id != ?', $id)
//                ->addWhere('position >= ?', $position)
//                ->orderBy('position ASC')
//                ->execute();
//            foreach ($shops as $shop) {
//                $newPosition = ((int) $shop->getPosition()) + 1;
//                TrdShopInfoTable::getInstance()->createQuery()
//                    ->update()
//                    ->set('position', $newPosition)
//                    ->where('id = ?', $shop->getId())
//                    ->execute();
//            }
//        }

        $message = array(
            'id' => $this->getId(),
            'type' => 'create',
            'channelType' => 'shop'
        );
        $this->sendMqMessage($message);

        parent::postInsert($event);
    }


    public function preUpdate($event)
    {
        $modified = $this->getModified();
//        if (isset($modified['position'])) {
//            $position = (int) $modified['position'];
//            $shopCategoryId = $this->getShopCategoryId();
//            $id = $this->getId();
//            $isExists = TrdShopInfoTable::getInstance()->createQuery()
//                ->where('shop_category_id = ?', $shopCategoryId)
//                ->addWhere('id != ?', $id)
//                ->addWhere('position = ?', $position)
//                ->count();
//            if ($isExists) {
//                $shops = TrdShopInfoTable::getInstance()->createQuery()
//                    ->select('id, position')
//                    ->where('shop_category_id = ?', $shopCategoryId)
//                    ->addWhere('id != ?', $id)
//                    ->addWhere('position >= ?', $position)
//                    ->orderBy('position ASC')
//                    ->execute();
//                foreach ($shops as $shop) {
//                    $newPosition = ((int) $shop->getPosition()) + 1;
//                    TrdShopInfoTable::getInstance()->createQuery()
//                        ->update()
//                        ->set('position', $newPosition)
//                        ->where('id = ?', $shop->getId())
//                        ->execute();
//                }
//            }
//        }

        $new = $this->getModified();
        $modified = array_keys($new);

        $updateFields = array(
            'name',
            'shop_category_id',
            'owner_name',
            'business',
            'charge',
            'status',
            'position',
        );
        if (array_intersect($updateFields, $modified)) {#消息队列
            $message = array(
                'id' => $this->getId(),
                'type' => 'update',
                'modified' => $modified
            );
            $this->sendMqMessage($message);
        }


        parent::preUpdate($event);
    }

    public function postDelete($event)
    {
        $message = array(
            'id' => $this->getId(),
            'type' => 'delete',
        );
        $this->sendMqMessage($message);
        parent::postDelete($event);
    }

    public function preSave($event) {
        if ($this->isNew() || $this->getLink()){
            $html = tradeCommon::requestUrl($this->getLink(), 'GET', NULL, NULL ,3);
            if(trim($html)){
                $pattern = '/<meta[^>]*content="[^>]*userId=(\d*)"/iUs';
                preg_match($pattern, $html, $match);

                if(isset($match[1])){
                    $this->setShopUserId($match[1]);
                }
            }
        }

        parent::preSave($event);
    }

    public function sendMqMessage($message)
    {
        $amqpParams = sfConfig::get("app_mabbitmq_options_shihuo");
        $connection = new AMQPConnection($amqpParams['params']['host'], $amqpParams['params']['port'], $amqpParams['params']['user'], $amqpParams['params']['pass'], $amqpParams['params']['vhost']);
        $channel = $connection->channel();
        $arguments = array(
            "x-dead-letter-exchange" => array("S", "amq.topic"),
            "x-message-ttl" => array("I", 2000),
            "x-dead-letter-routing-key" => array("S", "shihuo.shop.detail")
        );
        $channel->queue_declare('shop_deferred', false, true, false, false, false, $arguments);
        $message['channelType'] = 'shop';
        $msg = new AMQPMessage(json_encode($message));
        $channel->basic_publish($msg, '', 'shop_deferred');

    }

    public function getShopInfos($type = 1){
        if($this->getShopInfo()){
            $shopInfo = json_decode(gzuncompress(base64_decode($this->getShopInfo())), true);
            if(2 == $type){
                unset($shopInfo['data']);
            }if(3 == $type){
                $shopInfo = $shopInfo['data'];
            }

            return $shopInfo;
        }else{
            return array();
        }

    }

    public function setShopInfos($val){
        $this->setShopInfo(base64_encode(gzcompress(json_encode($val))));
    }

}
