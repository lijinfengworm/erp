<?php

/**
 * TrdLipinkaCardTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdLipinkaCardTable extends Doctrine_Table
{


    public static  $AVAILABLE_STATUS = 0;  //可用状态
    public static $BIND_STATUS = 1;  //绑定状态
    public static $USE_STATUS = 2;  //已使用状态
    public static $OVERDUE_STATUS = 3;  //已过期


    //卡密长度
    public static $cardNum = 10;

    //卡密正则规则
    public static $cardRegex = '/^[a-zA-Z0-9]{10}$/';
    //大卡密
    public static $cardLargeRegex = '/^[a-zA-Z0-9]{6}$/';


    /**
     * Returns an instance of this class.
     *
     * @return object TrdLipinkaCardTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdLipinkaCard');
    }



    public static function getFormatStatus($status,$type = 'string'){
        $string = array(0=>'未发放',1=>'已发放',2=>'已使用',3=>'已过期');
        $html_one = array(0=>'<span class="c-red">未发放</span>',1=>'<span class="c-blue">已发放</span>',2=>'<span class="c-green">已使用</span>',3=>'<span class="c-red">已过期</span>');
        $type = $$type;
        if(!empty($type[$status])) return $type[$status];
        return false;
    }



    //判断是否有重复的卡
    public static function isRepeat($account) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('account = ?',$account)
            ->fetchOne();
        if(empty($data)) return false;
        return true;
    }


    //判断用户是否绑定
    public static function isLargeBand($large_id = '',$user_id = '') {
        if(empty($large_id) || empty($large_id)) return false;
        $data = self::getInstance()
            ->createQuery()
            ->select('id')
            ->andWhere('is_large = ?',1)
            ->addWhere('large_id = ?',$large_id)
            ->addWhere('user_id = ?',$user_id)
            ->fetchOne();
        if(empty($data)) return false;
        return true;
    }

    //获取某个大卡中一个未使用的小卡
    public static function getLargeOne($large_id = '') {
        if(empty($large_id)) return false;
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('is_large = ?',1)
            ->addWhere('large_id = ?',$large_id)
            ->addWhere('user_id = ?',0)
            ->limit(1)
            ->fetchOne();
        if(empty($data)) return false;
        return $data;
    }




    //获取某个记录所生成的卡密总数
    public static function getRecordCount($record_id) {
        $data = self::getInstance()
            ->createQuery()
            ->select('count(id) as num')
            ->andWhere('record_id = ?',$record_id)
            ->limit(1)
            ->fetchArray();
        if(!empty($data)) $data = $data[0]['num'];
        return $data;
    }



    //通过某个卡密获取一条记录
    public static function getByCardOne($card,$isToArray = true) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('account = ?',$card)
            ->fetchOne();
        if(empty($data)) return false;
        if($isToArray) return $data->toArray();
        return $data;
    }



    //获取某个记录所生成的卡密
    public static function getRecordData($record_id) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('record_id = ?',$record_id)
            ->fetchArray();
        if(!empty($data)) return $data;
        return false;
    }

    //获取已生成卡密的会员
    public static function  getExistUids($record_id) {
        $data = self::getInstance()
            ->createQuery()
            ->select('user_id')
            ->andWhere('record_id = ?',$record_id)
            ->fetchArray();
         if(empty($data)) return false;
        return FunBase::get_current_array($data,'user_id',',',true);
    }


    /**
     * 获取所有没有发通知的发送到账户的卡密
     */
    public static function getNoSyncIds($limit = 500) {
        $data = self::getInstance()
            ->createQuery()
            ->select('id')
            ->andWhere('sync_status = ?',0)
            ->andWhere('create_type = 2')
            ->limit($limit)
            ->fetchArray();
        if(empty($data)) return false;
        return FunBase::get_current_array($data,'id',',',true);
    }





    /**
     * 获取某个会员的卡密
     */
    public static function getAll($bind = array()) {
        $data = self::getInstance()->createQuery();
        //select
        if (!empty($bind['select'])){
            $data->select($bind['select']);
        } else {
            $data->select("*");
        }
        //where 简单判断  如果复杂 建议新写函数
        if(!empty($bind['where']) && count($bind['where']) > 0) {
            foreach($bind['where'] as $k=>$v) {
                $data->addWhere($v);
            }
        }

        //whereIn 简单判断  如果复杂 建议新写函数
        if(!empty($bind['whereIn']) && count($bind['whereIn']) > 0) {
            foreach($bind['whereIn'] as $k=>$v) {
                $data->WhereIn($k,$v);
            }
        }

        //order
        if (!empty($bind['order'])){
            $data->orderBy($bind['order']);
        } else {
            $data->orderBy('id desc');
        }
        //limit
        if (!empty($bind['limit'])){
            $data->limit($bind['limit']);
        }

        if(!empty($bind['offset'])) {
            $data->offset($bind['offset']);
        }
        $data =  $data->fetchArray();
        if(!empty($bind['is_count'])) {
            $data = $data[0]['num'];
        }
        return $data;
    }



    //删除指定记录
    public static function del_old($lipinka_id) {
        $data = self::getInstance()
            ->createQuery()
            ->select('*')
            ->andWhere('lipinka_id = ?',$lipinka_id)
            ->execute();
        return  $data->delete();
    }


    //设置礼品卡过期
    public static function setOverdueTime($_id) {
        $_data = self::getInstance()->find($_id);
        if(!$_data) return false;
        $_data->setStatus(self::$OVERDUE_STATUS);
        $_data->save();
        return true;
    }








}