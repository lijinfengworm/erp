<?php

/**
 * KaluliOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class KaluliOrder extends BaseKaluliOrder
{
    //status 状态
    public static  $BACKEND_CANCEL_STATUS = 9;  //后台主动取消
    public static $CREATE_STATUS = 0; //订单生成
    public static $DELIVERY_STATUS = 1; //订单已发货
    public static $RETURN_GOODS_STATUS = 6; //订单已退货
    public static $WAIT_KALULI_GOODS_STATUS = 5; //待卡路里收货

    //pay 状态
    public static  $WAIT_REFUND_PAY_STATUS = 3; //pay_status  退款中
    public static  $SUCC_REFUND_PAY_STATUS = 4; //pay_status  退款完成
    public static  $SUCCESS_PAY_STATUS = 1; //已支付

    //默认快递类型
    public static $_DEFAULT_EXPRESS_TYPE = 4;



    //快递类型
    public static $EXPRESS_TYPE = array(
        1=>'申通',
        2=>'顺丰',
        3=>'EMS',
        4=>'圆通',
        5=>'韵达',
        6=>'中通',
        7=>'天天快递',
        8=>'汇通',
        9=>'宅急送',
        33=>'速尔',
        28=>'其他',
    );

    //仓库类型
    public static $DEPOT_TYPE = array(
        1=>'识货仓库',
        2=>'美国仓库',
        3=>'待定'
    );


    public function getFormatDomesticExpress()
    {
        switch($this->getDomesticExpressType()){
            case 1:
                return '申通';
                break;
            case 2:
                return '顺丰';
                break;
            case 3:
                return 'EMS';
                break;
            case 4:
                return '圆通';
                break;
            case 5:
                return '韵达';
                break;
            case 6:
                return '中通';
                break;
            case 7:
                return '天天快递';
                break; 
            case 8:
                return '汇通';
                break; 
            case 9:
                return '宅急送';
                break; 
            case 33:
                return '速尔快递';
                break; 
            case 28:
                return '其他';
                break;
            default:
                return '其他';
                break;
        }
    }

    public static function setExpressType($express_type) {
        foreach(KaluliOrder::$EXPRESS_TYPE as $k=>$v) {
            if(preg_match("/.*".$v.".*/",$express_type)) {
                return $k;
            }
        }
        return 0;
    }


    public function getFormatDepotType()
    {
        $_type = $this->getDepotType();
        if(!empty(self::$DEPOT_TYPE[$_type])) return self::$DEPOT_TYPE[$_type];
        return '待定';
    }

    public function getFormatStatus($status = false)
    {
        $status === false && $status = $this->getStatus();
        switch ($status) {
            case '0':
                return '订单生成';
                break;
            case '1':
                return '订单发货';
                break;
            case '2':
                return '订单完成';
                break;
            case '3':
                return '退货处理中';
                break;
            case '4':
                return '待用户发货';
                break;
            case '5':
                return '待卡路里收货';
                break;
            case '6':
                return '已退货';
                break;
            case '7':
                return '订单关闭';//退款成功
                break;
            case '8':
                return '用户取消';
                break;
            case '9':
                return '卡路里取消';
                break;
            case '10':
                return '拒绝退货';
                break;
            default:
                return '未知状态';
                break;

        }
    }

    public function getFormatPayStatus($status = false)
    {
        $status === false && $status = $this->getPayStatus();
        switch ($status) {
            case '0':
                return '待付款';
                break;
            case '1':
                return '已支付';
                break;
            case '2':
                return '待退款';
                break;
            case '3':
                return '退款中';
                break;
            case '4':
                return '退款完成';
                break;
            case '5':
                return '退款失败';
                break;
            default:
                return '未知状态';
                break;
        }
    }

    public function getFormatOrderStatus(){
      $str = '';
        if ($this->getStatus() == 0 && $this->getPayStatus() == 0){
            $str = '待付款';
        } else if($this->getStatus() == 0 && $this->getPayStatus() == 1){
            $str = '待发货';
        } else if($this->getStatus() == 1 && $this->getPayStatus() == 1){
            $str = '已发货';
        } else if($this->getStatus() == 2 && $this->getPayStatus() == 1){
            $str = '交易成功';
        } else if($this->getStatus() == 3 && $this->getPayStatus() == 1){
            $str = '退货处理中';
        } else if($this->getStatus() == 4 && $this->getPayStatus() == 1){
            $str = '退货中，待用户发货';
        } else if($this->getStatus() == 5 && $this->getPayStatus() == 1){
            $str = '退货中，待卡路里收货';
        } else if($this->getStatus() == 6 && ($this->getPayStatus() == 2 || $this->getPayStatus() == 3)){
            $str = '已退货，退款中';
        } else if($this->getPayStatus() == 3){
            $str = '退款中';
        } else if($this->getPayStatus() == 4){
            $str = '交易关闭';
        } else if($this->getPayStatus() == 5){
            $str = '退款失败';
        } else if(($this->getStatus() == 8 || $this->getStatus() == 9) && $this->getPayStatus() == 0){
            $str = '订单取消';
        } else if($this->getStatus() == 10 && $this->getPayStatus() == 1){
            $str = '交易完成,退款被拒绝';
        }
        return $str;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $modifiedFields = $this->getModified(true);
        parent::save($conn);
        //同步主表状态
        $syncAskKeyArray =array('status','pay_status','is_comment');
        if(!$this->isNew() && array_intersect($syncAskKeyArray,array_keys($modifiedFields)))
        {
            if($this->getStatus() == 1){//订单发货
                $this->syncMainOrderStatus();//同步订单的状态

                //发货 结算订单有效
                $message = array('order_number'=>$this->getOrderNumber(), 'sub_order_number'=>$this->getId(), 'type'=>'delivery');
                kaluliFun::sendMqMessage('kalulicps.order.detail',$message,'kaluli_order_detail_deferred');
            }
            if($this->getStatus() == 2){//收货
                $this->syncMainOrderStatus();//同步订单的状态
            }
            if($this->getStatus() == 3){//申请退款退货
                $this->syncMainOrderStatus();//同步订单的状态

                //发货 结算订单有效
                $message = array('order_number'=>$this->getOrderNumber(), 'sub_order_number'=>$this->getId(), 'type'=>'applyReturn');
                kaluliFun::sendMqMessage('kalulicps.order.detail',$message,'kaluli_order_detail_deferred');
            }
            if($this->getPayStatus() == 3){
                $this->syncMainOrderPayStatus();//同步退款的状态
            }
            if($this->getPayStatus() == 4){
                $this->syncMainOrderPayStatus();//退款成功的状态
            }
            if($this->getIsComment() == 1){
                $this->syncMainOrderIsComment();//评价晚 同步已完成的状态
            }
            if($this->getStatus() == 8 || $this->getStatus() == 9){//订单取消
                $message = array('order_number'=>$this->getOrderNumber(), 'type'=>'cancel');
                kaluliFun::sendMqMessage('kalulicps.order.detail',$message,'kaluli_order_detail_deferred');
            }
        }
        return $this->getId();

    }

    private function syncMainOrderStatus(){
        $status = $this->getStatus();
        if($status == 1){
            $result = KaluliOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhereIn('status',array(0,1))->andWhere('domestic_order_number is null or domestic_order_number =""')->andWhere('pay_status = 1')->execute();
            if (count($result)==0){
                $mainObj = KaluliMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
                $mainObj->setStatus(2);//待收货
                $mainObj->save();
            }
        } else if($status == 2){
            $result = KaluliOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhereIn('status',array(0,1))->andWhere('pay_status = 1')->execute();
            if (count($result)==0){
                $mainObj = KaluliMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
                $mainObj->setStatus(3);//待评价
                $mainObj->save();
            }
        } else if($status == 3) {
            $result = KaluliOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?', $this->getOrderNumber())->andWhereIn('status',array(0,1))->andWhere('pay_status = 1')->execute();
            if (count($result) == 0) {
                $mainObj = KaluliMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
                $mainObj->setStatus(5);//退款
                $mainObj->save();
            }
        }
        return true;
    }
    private function syncMainOrderPayStatus(){
        if($this->getPayStatus() == 3){
            $result = KaluliOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('pay_status = 1')->execute();
            if (count($result)==0){
                $mainObj = KaluliMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
                $mainObj->setStatus(5);
                $mainObj->save();
            }
        } else if($this->getPayStatus() == 4){
            $result = KaluliRefundApplyTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('order_id = ?',$this->getId())->andWhere('status = ?',3)->fetchOne();
            if ($result){
                $result->setStatus(4);
                $result->save();
            }
        }
        return true;

    }
    private function syncMainOrderIsComment(){
        $result = KaluliOrderTable::getInstance()->createQuery()->select('*')->where('order_number = ?',$this->getOrderNumber())->andWhere('pay_status = 1')->andWhere('is_comment = 0')->execute();
        if (count($result)==0){
            $mainObj = KaluliMainOrderTable::getInstance()->findOneByOrderNumber($this->getOrderNumber());
            $mainObj->setStatus(6);
            $mainObj->save();
        }
        return true;
    }
}
