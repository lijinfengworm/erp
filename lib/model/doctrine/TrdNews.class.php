<?php

/**
 * TrdNews
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TrdNews extends BaseTrdNews
{
    public $attr_array = false;
    public $upload_images_dir = '/trade/news/';

    //获取msg的属性值
    public function getMessageAttr($attr_name = NULL)
    {
        if (!$attr_name) {
            return '';
        }
        if ($this->attr_array === FALSE) {
            $this->attr_array = json_decode($this->getAttr(), TRUE);
        }

        if (isset($this->attr_array[$attr_name])) {
            return $this->attr_array[$attr_name];
        } else {
            return '';
        }
    }

    //设置msg的属性值
    public function setMessageAttr($attr_name = NULL, $attr_value = '')
    {
        if (!$attr_name) {
            return false;
        }
        if ($this->attr_array === FALSE) {
            $this->attr_array = json_decode($this->getAttr(), TRUE);
        }
        $this->attr_array[$attr_name] = $attr_value;
        $this->setAttr(json_encode($this->attr_array));
    }

    public function getTagString()
    {
        $tags = TrdNewsTagTable::getInstance()->createQuery('m')
            ->where('m.trd_news_id =?', $this->getId())
            ->orderBy('m.is_default desc')
            ->execute();
        $string = '';
        foreach ($tags as $tag) {
            $string .= $string ? ',' . $tag->getTrdProductTag()->getName() : $tag->getTrdProductTag()->getName();
        }
        return $string;
    }


    /**
     * 展示版块
     */
    public function getTypeString()
    {
        switch($this->getType()){
            case 1:
                return '国内优惠';
                break;
            case 2:
                return '海淘专区';
                break;
            default:
                return '未知';
                break;
        }
    }


    /**
     * 获取状态
     */
    public function getAuditStatusString()
    {

        $auditArr = array(1=>'通过',2=>'待审核',3=>'被拒绝',4=>'改通过',5=>'被退回');
        if(!empty($auditArr[$this->getAuditStatus()])) return $auditArr[$this->getAuditStatus()];
        return ' - ';
    }

    /**
     * 展示版块
     */
    public static function funGetTypeString($type){
        switch($type){
            case 1:
                return '国内优惠';
                break;
            case 2:
                return '海淘专区';
                break;
            default:
                return '未知';
                break;
        }
    }


    /**
     * 展示类型
     */
    public static function funGetRootTypeString($root_type){
        $typeArr = array(1=>'文章',2=>'公告');
        if(!empty($typeArr[$root_type])) return $typeArr[$root_type];
    }


    /**
     * 展示审核状态
     */
    public static function funGetAuditStatusString($auditStatus){
        $auditArr = array(1=>'<span class="c-green">审核通过</span>',2=>'待审核',3=>'被拒绝',4=>'<span class="c-blue">修改后通过</span>',5=>"被退回");
        if(!empty($auditArr[$auditStatus])) return $auditArr[$auditStatus];
    }

    /**
     * 获取发布人名字
     */
    public static function funGetAuthorString($attr,$author_id) {
        if(empty($attr)) return $author_id;
        $_attr = unserialize($attr);
        if(!empty($_attr['create_user'])) return $_attr['create_user'];
    }


    /**
     * 发布人姓名
     */
    public function getAuthorNameString()
    {
       $_id =  $this->getAuthorId();
       if(strstr($_id,'-')) return $_id;
       $_user = BackendUserTable::getInstance()->find($_id);
        if(!empty($_user)) return $_user->getUsername();
        return $_id;
    }


    /*
     * 返回cdn域名
     */
    public static function getCDNDomain($c = 1)
    {
        $c = $c % 2 ? 1 : 2;
        return 'http://c' . $c . '.hoopchina.com.cn';
    }

    /*
    * 列表默认显示缩略图
    */

    public function getImgThumbnailUrl()
    {
        if (preg_match('/^\d{6}\/.*$/', $this->getImgPath())) {   //img_path字段包含日期路径
            return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . substr($this->getImgPath(), 0, 6) . '/thumbnail-' . substr($this->getImgPath(), 7);
        }
        return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . date('ymd', strtotime($this->getPublishDate())) . '/thumbnail-' . $this->getImgPath();
    }

    /*
     * 列表默认显示缩略图cdn
     */
    public function getCDNImgThumbnailUrl()
    {
        if (preg_match('/^\d{6}\/.*$/', $this->getImgPath())) {   //img_path字段包含日期路径
            return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . substr($this->getImgPath(), 0, 6) . '/thumbnail-' . substr($this->getImgPath(), 7);
        }
        return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . date('ymd', strtotime($this->getPublishDate())) . '/thumbnail-' . $this->getImgPath();
    }

    /*
     * 列表点击展开显示的缩略图
     */

    public function getImgBmiddleUrl()
    {
        if (preg_match('/\.gif$/i', $this->getImgPath())) {   //gif返回原图地址
            return $this->getImgUrl();
        }
        if (preg_match('/^\d{6}\/.*$/', $this->getImgPath())) {   //img_path字段包含日期路径
            return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . substr($this->getImgPath(), 0, 6) . '/bmiddle-' . substr($this->getImgPath(), 7);
        }
        return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/trade/news/' . date('ymd', strtotime($this->getPublishDate())) . '/bmiddle-' . $this->getImgPath();
    }

    /*
     * 列表点击展开显示的缩略图cdn
     */

    public function getCDNImgBmiddleUrl()
    {
        if (preg_match('/\.gif$/i', $this->getImgPath())) {   //gif返回原图地址
            return $this->getImgUrl();
        }
        if (preg_match('/^\d{6}\/.*$/', $this->getImgPath())) {   //img_path字段包含日期路径
            return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/star/event/images/' . substr($this->getImgPath(), 0, 6) . '/bmiddle-' . substr($this->getImgPath(), 7);
        }
        return tradeConfig::getCDNDomain($this->getId()) . '/' . basename(sfConfig::get('sf_upload_dir')) . '/star/event/images/' . date('ymd', strtotime($this->getPublishDate())) . '/bmiddle-' . $this->getImgPath();
    }


    public function getAuthorInfo()
    {
        return $this->getAdminInfo($this->getAuthorId());
    }

    public function getEditorInfo()
    {
        return $this->getAdminInfo($this->getEditorId());
    }

    public function getAdminInfo($id)
    {
        if (!$id) return '';
        if ($id > 0) {
            $user = BackendUserTable::getInstance()->findOneByUid($id);
            //如果backend 后台没有 ID 那么通过 新后台获取
            if (!$user) {
                return TrdAdminUserTable::getOneByhpId($id,'username');
            }
            return 'Backend后台管理员: ' . $user->getUsername();
        }
        return '前台发布，ID: <a href="http://my.hupu.com/' . abs($id) . '" target="_blank">' . abs($id) . '</a>';
    }

    /*
     * 识货新闻商品图片获取
     */
    public function getShiHuoGoodsImg()
    {
        return $this->getImgPath() ? $this->getImgPath() : 'http://img04.store.sogou.com/net/a/46/link?appid=46&url=' . urlencode($this->getImgLink());
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $modifiedFields = $this->getModified(true);
        $this->setRank($this->getTrueRank());
        parent::save($conn);

        /*$syncKeyArray = array('title', 'subtitle', 'orginal_url', 'type', 'store_id', 'is_display_index', 'hits', 'publish_date', 'is_delete', 'root_id', 'children_id', 'is_shopping','audit_status');
        $all_id = '';
        if ($this->isNew() || array_intersect($syncKeyArray, array_keys($modifiedFields))) {
            //TODO 临时：判断audit_status 是否审核过 审核过才会执行
            if(in_array($this->getAuditStatus(),array(TrdNewsTable::$SUCC_AUDIT,TrdNewsTable::$EDIT_SUCC_AUDIT))) {
                $this->syncToSphinx();
            }
        }*/
        return $this->getId();
    }

    public function syncToSphinx()
    {
        /*if ($this->getIsDelete() == 1) {
            hcRabbitMQPublisher::getInstance('shihuo_news')->publish(new hcAMQPMessage(array('id' => $this->getId(), 'type' => 1)));
        } else {
            hcRabbitMQPublisher::getInstance('shihuo_news')->publish(new hcAMQPMessage(array('id' => $this->getId(), 'type' => 0)));
        }*/
        return true;
    }

    //判断是否可以代购
    public function getDaigouFlag()
    {
        if (!$this->getProductId()) {
            return false;
        }
//        $time = time();
//        if ($this->getProductStartDate() && $this->getProductEndDate()) {
//            if ($this->getProductStartDate() > $time || $this->getProductEndDate() < $time) {
//                return false;
//            }
//        } elseif ($this->getProductStartDate() || $this->getProductEndDate()) {
//            if ($this->getProductStartDate() && $this->getProductStartDate() > $time) {
//                return false;
//            }
//            if ($this->getProductEndDate() && $this->getProductEndDate() < $time) {
//                return false;
//            }
//        }
        return true;
    }


    public function getPageUrl()
    {
        return tradeConfig::getDomain() . "/haitao/youhui/" . $this->getId() . ".html";
    }


    /**
     *  计算rank
     */
    public function getTrueRank()
    {
        $hits = $this->getHits() ? $this->getHits() : 1;

        $T1 = strtotime($this->getPublishDate());
        $T = strtotime("2013-09-01 00:00:00");
        $rank = log(10, $hits) + ($T1 - $T) / 43200;
        return $rank;
    }

    public function completeFormatApp($href = "")
    {
        sfProjectConfiguration::getActive()->loadHelpers('shihuoDetailText');
        $go_app = sfConfig::get('app_app');

        $data = array();
        $data['id'] = $this->getId();
        $data['title'] = $this->getTitle();
        $data['subtitle'] = $this->getSubtitle();
        $data['img_path'] = $this->getImgPath();
        $data['content'] = getLitterContentForApp($this->getText(), $go_app['go']['href'] . '?url=' . urlencode($this->getOrginalUrl()));
        $data['praise'] = $this->getPraise();
        $data['img_path480'] = $this->getHeight() && $this->getWidth() ? str_replace('thumbnail', 'thumbnail480', $this->getImgPath()) : $this->getImgPath();
        $data['width480'] = "480";
        $data['height480'] = $this->getHeight() && $this->getWidth() ? intval(round(480 * ($this->getHeight()) / ($this->getWidth()))) : 300;
        $data['go_website'] = $this->getOrginalType();
        $data['text'] = $this->getText();
        $data['hits'] = $this->getHits();
        if ($href) {
            $data['href'] = $href;
        } else {
            $data['href'] = $go_app['go']['href'] . '?url=' . urlencode($this->getOrginalUrl());
        }
        $data['time'] = (string)strtotime($this->getPublishDate());
        $data['orginal_url'] = $this->getOrginalUrl();
        return $data;
    }

    public function simpleFormatApp($href = "")
    {
        $go_app = sfConfig::get('app_app');
        $data = array();
        $data['id'] = $this->getId();
        $data['title'] = $this->getTitle();
        $data['subtitle'] = $this->getSubtitle();
        $data['img_path'] = $this->getImgPath();
        $data['price'] = $this->getPrice();
        $data['praise'] = $this->getPraise();
        $data['go_website'] = $this->getOrginalType();
        if ($href) {
            $data['href'] = $href;
        } else {
            $data['href'] = $go_app['go']['href'] . '?url=' . urlencode($this->getOrginalUrl());
        }
        $data['time'] = (string)strtotime($this->getPublishDate());
        return $data;
    }

    public function baseFormatApp()
    {
        sfProjectConfiguration::getActive()->loadHelpers('shihuoDetailText');
        $go_app = sfConfig::get('app_app');

        $product_widget = new productWidget($this->getText());
        $content  = $product_widget->pattern();

        $data = array();
        $data['id'] = $this->getId();
        $data['title'] = $this->getTitle();
        $data['subtitle'] = $this->getSubtitle();
        $data['spreadtitle'] = $this->getSpreadtitle();
        $data['img'] = $this->getImgPath();
        $data['content'] = $content;//getLitterContentForApp($this->getText(), $go_app['go']['href'] . '?url=' . urlencode($this->getOrginalUrl()));
        $data['support'] = $this->getSupport();
        $data['against'] = $this->getAgainst();
        $data['go_website'] = $this->getOrginalType();
        $data['text'] = $this->getText();
        $data['hits'] = $this->getHits();
        $data['reply_count'] = $this->getReplyCount();
        $data['daigou_flag'] = $this->getDaigouFlag();
        $data['root_type'] = $this->getRootType();

        if ($productId = $this->getProductId()) {
            $data['go_url'] = 'shihuo://www.shihuo.cn?route=daigouDetail&pid=' . $productId;
        } else {
            $data['go_url'] = 'shihuo://www.shihuo.cn?route=go&url=' . urlencode($this->getOrginalUrl());
            /*$url = parse_url($this->getOrginalUrl());
            if ($url['host'] == 'item.taobao.com' || ($url['host'] == 'detail.tmall.com' && strstr($url['path'], '/item.htm') != false)) {
                $data['go_url'] = 'shihuo://www.shihuo.cn?route=go&url=' . urlencode($this->getOrginalUrl());
            } else {
                $data['go_url'] = urlencode($this->getOrginalUrl());
            }*/
        }

        $data['time'] = $this->getPublishDate();
        return $data;
    }

    /**
     * 获取首页每日优惠限时时间
     */
    public function getNewsDateToHome()
    {
        $time = strtotime($this->getPublishDate());
        $timeDiff = time() - $time;
        if ($timeDiff <= 3600) {
            return ceil($timeDiff / 60) . '分钟前';
        } else if ($timeDiff > 3600 && $timeDiff <= 3600 * 24) {
            return date("h:i", $time);
        } else {
            return date("m-d h:i", $time);
        }

    }

    /**
     * 获取海淘优惠列表页发布时间
     * @param null $next_time
     * @return bool|string
     */
    public function getNewsDateToList()
    {
        $time = strtotime($this->getPublishDate());
        $timeDiff = time() - $time;
        if ($timeDiff <= 3600) {
            return ceil($timeDiff / 60) . '分钟前';
        } else if (($timeDiff > 3600 && $timeDiff <= 3600 * 24)) {
            return date("H:i", $time);
        } else {
            return date("m-d H:i", $time);
        }
    }

    public function postInsert($event)
    {
        $message = array(
            'id' => $this->getId(),
            'type' => 'create',
            'channelType' => 'news'
        );
        $this->sendMqMessage($message);
        parent::postInsert($event);
    }

    public function preUpdate($event)
    {
        $new = $this->getModified();
        $modified = array_keys($new);

        $updateFields = array('title','price','hits','root_id','children_id','commodity',
            'store_id','product_id','publish_date','is_delete','audit_status');
        if(array_intersect($updateFields,$modified)){
            //如果是删除了就不处理了
            $message = array(
                'id' => $this->getId(),
                'channelType' => 'news',
                'modified' => $modified
            );

            if (empty($new['is_delete'])) {
                $message['type'] = 'update';
            } else {
                $message['type'] = 'delete';
            }


            $this->sendMqMessage($message);
        }

        parent::preUpdate($event);
    }

    public function postDelete($event)
    {
        $message = array(
            'id' => $this->getId(),
            'type' => 'delete',
            'channelType' => 'news'
        );
        $this->sendMqMessage($message);
        parent::postDelete($event);
    }

    public function sendMqMessage($message)
    {
        $amqpParams = sfConfig::get("app_mabbitmq_options_shihuo");
        $connection = new AMQPConnection($amqpParams['params']['host'], $amqpParams['params']['port'], $amqpParams['params']['user'], $amqpParams['params']['pass'], $amqpParams['params']['vhost']);
        $channel = $connection->channel();
        $arguments = array(
            "x-dead-letter-exchange" => array("S", "amq.topic"),
            "x-message-ttl" => array("I", 2000),
            "x-dead-letter-routing-key" => array("S", "shihuo.news.detail")
        );
        $channel->queue_declare('news_deferred', false, true, false, false, false, $arguments);


        $msg = new AMQPMessage(json_encode($message));
        $channel->basic_publish($msg, '', 'news_deferred');
    }

}
