<?php

/**
 * TrdGrouponTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrdGrouponTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TrdGrouponTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TrdGroupon');
    }
    
    public function getRecommend($filter_id = 0,$limit = 3)
    {
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(1);
        $recommend_info = unserialize($redis->get('trade_groupon_recommend'));
        if (empty($recommend_info)) return array();
        $result = array_flip($recommend_info);
        $recommend_info = array_slice(array_values($recommend_info), 0,$limit);
        $recommends = $this->addFilterCondition($this->createQuery()->whereIn('id',  array_values($recommend_info))->andWhere('id !=?',$filter_id))->execute();

        foreach($recommends as $r)
        {
            $result[$r->getId()] = $r;
        }
        foreach ($result as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($result[$key]);
            }
        }
        return $result;
    }

    public function getPast($filter_id = 0)
    {
        $redis = sfContext::getInstance()->getDatabaseConnection('kaluliRedis');
        $redis->select(1);
        $recommend_info = unserialize($redis->get('trade_groupon_past'));
        if (empty($recommend_info)) return array();
        $result = array_flip($recommend_info);
        $recommends = $this->createQuery()->whereIn('id',  array_values($recommend_info))->limit(4)->execute();

//        foreach($recommends as $r)
//        {
//            $result[$r->getId()] = $r;
//        }
//        foreach ($result as $key=>$r)
//        {
//            if(!is_object($r))
//            {
//                unset($result[$key]);
//            }
//        }
        return $recommends;
    }
    public function getAllActiveBrand()
    {
        $all_brand = $this->addFilterCondition($this->createQuery()->select('brand_id,count(*) as c'))->groupBy('brand_id')->orderBy('c desc')->fetchArray();
        $re = array();
        foreach ($all_brand as $k=>$v)
        {
            if(empty($v['brand_id']))
            {
                unset($all_brand[$k]);
            }else{
                $re[$v['brand_id']] = $v['brand_id'];
            }
            
        }
        if(count($re) > 0)
        {
            $barand_info = TrdBrandTable::getInstance()->getSomeById($re);
           
            foreach ($all_brand as $k=>&$v)
            {
                
                $v['name'] = $barand_info[$v['brand_id']]->getName();
            }
            return $all_brand;
        }
        return array();
        
    }
    
    public function getAllActiveCategory()
    {
        $all_category = $this->addFilterCondition($this->createQuery()->select('category_id,count(*) as c'))->groupBy('category_id')->orderBy('c desc')->fetchArray();
        $re = array();
        foreach ($all_category as $k=>$v)
        {
            if(empty($v['category_id']))
            {
                unset($all_category[$k]);
            }else{
                $re[$v['category_id']] = $v['category_id'];
            }
            
        }
        if(count($re) > 0)
        {
            $category_info = TrdGrouponCategoryTable::getInstance()->getSomeById($re);
           
            foreach ($all_category as $k=>&$v)
            {

                $v['name'] = $category_info[$v['category_id']]->getName();
            }
            return $all_category;
        }
        return array();
        
    }


    /**
     * 最新上架
     */
    public function getNew($limit = 10,$height,$width,$ids = array()){
        $q = Doctrine_Query::create()
            ->setResultCacheLifeSpan(60 * 2)
            ->useResultCache()
            ->from('TrdGroupon t')
            ->select('t.id, t.title, t.price , t.original_price, t.attend_count , t.discount, t.end_time, t.attr')
            ->where('t.status = ?', 6);
        if ($ids) $q->andWhereNotIn('id',$ids);
        //获取今天上架的
        $query = $q->addwhere('start_time < ?',  date('Y-m-d ',strtotime('+1 day')))
            ->addwhere('start_time >= ?',  date('Y-m-d'))
            ->addwhere('start_time <= ?',  date('Y-m-d H:i:s'))
            ->addWhere('end_time > ?',  date('Y-m-d H:i:s'))
            ->addWhere('deleted_at is null')
            ->orderBy('rand()')
            ->limit($limit)
            ->execute();

        $all = $this->_formatGrouponData($query,$height,$width);
        //今天的不够拿昨天的补充
        if(count($all) < $limit)
        {
            $q = Doctrine_Query::create()
                ->setResultCacheLifeSpan(60 * 2)
                ->useResultCache()
                ->from('TrdGroupon t')
                ->select('t.id, t.title, t.price , t.original_price, t.attend_count , t.discount, t.end_time, t.attr')
                ->where('t.status = ?', 6);
            if ($ids) $q->andWhereNotIn('id',$ids);
            //获取昨天上架的
            $query = $q->addwhere('start_time < ?',  date('Y-m-d'))
                ->addwhere('start_time >= ?',  date('Y-m-d',strtotime('-1 day')))
                ->addWhere('end_time > ?',  date('Y-m-d H:i:s'))
                ->addWhere('deleted_at is null')
                ->orderBy('rand()')
                ->limit($limit - count($all))
                ->execute();

            $yesterday = $this->_formatGrouponData($query,$height,$width);
            $all = array_merge($all,$yesterday);
        }
        //还不够拿前天的补充
        if(count($all) < $limit)
        {
            $q = Doctrine_Query::create()
                ->setResultCacheLifeSpan(60 * 2)
                ->useResultCache()
                ->from('TrdGroupon t')
                ->select('t.id, t.title, t.price , t.original_price, t.attend_count , t.discount, t.end_time, t.attr')
                ->where('t.status = ?', 6);
            if ($ids) $q->andWhereNotIn('id',$ids);
            //获取前天上架的
            $query = $q->addwhere('start_time < ?',  date('Y-m-d',strtotime('-1 day')))
                ->addwhere('start_time >= ?',  date('Y-m-d',strtotime('-2 day')))
                ->addWhere('end_time > ?',  date('Y-m-d H:i:s'))
                ->addWhere('deleted_at is null')
                ->orderBy('rand()')
                ->limit($limit - count($all))
                ->execute();
            $yesterday = $this->_formatGrouponData($query,$height,$width);
            $all = array_merge($all,$yesterday);
        }
        return $all;
    }

    /**
     * 按人气排序
     */
    public function getHot($limit = 10,$height,$width,$ids = array(),$offset = 0){
        $q = Doctrine_Query::create()
            ->setResultCacheLifeSpan(60 * 2)
            ->useResultCache()
            ->from('TrdGroupon t')
            ->select('t.id, t.title, t.price , t.original_price, t.attend_count, t.start_time, t.discount, t.end_time, t.attr, t.usp_logo')
            ->where('t.status = ?', 6);
        if ($ids) $q->andWhereNotIn('id',$ids);
        $query = $q->addwhere('start_time < ?',  date('Y-m-d H:i:s'))
            ->addWhere('end_time > ?',  date('Y-m-d H:i:s'))
            ->addWhere('deleted_at is null')
            ->orderBy('attend_count desc')
            ->limit($limit);
        $offset && $query->offset($offset);
        $query->execute();
        return $this->_formatGrouponData($query,$height,$width);
    }


    public function getAllActiveCount()
    {
        $q = $this->addFilterCondition($this->createQuery()->select('count(*) as c'))->fetchOne();
        return $q->getC(); 
    }
    public function getAllActiveGoods($orderBy,$order,$brand_id = 0,$category_id = 0)
    {
        $q = $this->addFilterCondition($this->createQuery());
        if(!empty($brand_id))
        {
            $q->addWhere('brand_id = ?',$brand_id);
        }
        if(!empty($category_id))
        {
            $q->addWhere('category_id = ?',$category_id);
        }
        
        if($order == 'desc')
        {
            $order == 'desc';
        }else{
            $order == 'asc';
        }
        
        if($orderBy == 'show_order')
        {
            $q->orderBy('show_order '.$order);
        }elseif ($orderBy =='hot') {
            
            $q->orderBy('attend_count '.$order);
        }elseif ($orderBy =='price') 
        {
            $q->orderBy('price '.$order);
        }elseif ($orderBy =='discount') 
        {
            $q->orderBy('discount '.$order);
        }
        
        return $q->execute();
    }
    public static function addFilterCondition(Doctrine_Query $q = null) {
        
        return $q->addwhere('start_time < ?',  date('Y-m-d H:i:s'))->addWhere('end_time > ?',  date('Y-m-d H:i:s'))->andWhere('status = ?',6)->addWhere('deleted_at is null');
              
    }
    public function getSomeRankGoods($limit = 4,$fifter_id = array())
    {
        return $this->addFilterCondition($this->createQuery()->andWhereNotIn('id',$fifter_id)->orderBy('rand()')->limit($limit))->execute();
    }
    public function getActiveGoodsByTime($orderBy,$limit = 10)
    {
        $q = $this->addFilterCondition($this->createQuery());
        if ($orderBy == 'created_at')
        {
            $q->orderBy('created_at desc');
        } elseif ($orderBy =='show_order') {
            $q->orderBy('show_order desc');
        }
        $q->limit($limit);
        return $q->execute();
    }
    /*
     * 删除单条内容
     */
    public static function deleteMessage($id=0,$msg_source='',$list_page=0) {
        $queryResult = self::getInstance()->createQuery('m')
                        ->update()
                        ->set('m.deleted_at', 1)
                        ->where('m.id =?', $id)
                        ->execute();
    
        return $queryResult;
    }

    /*
     * 删除多条内容
     */

    public static function deleteMessages($ids) {
        if (empty($ids))
            return false;
        return self::getInstance()->createQuery('m')
                        ->update()
                        ->set('deleted_at', 1)
                        ->whereIn('m.id', $ids)
                        ->execute();
    }

    /*
     * 按id
     */

    public static function getByid($id) {
        if (empty($id))
            return false;
        return self::getInstance()->createQuery()
            ->where('id='.$id)
            ->fetchOne();
    }

    /**
     *
     * app按分页获取团购的接口 
     */
    public function getAllGrouponForApp($offset = 0,$pagesize = 10,$orderBy,$order,$brand_id = 0,$category_id = 0)
    {
        $q = $this->addFilterCondition($this->createQuery());
        if(!empty($brand_id))
        {
            $q->addWhere('brand_id = ?',$brand_id);
        }

        if(!empty($category_id))
        {
            $q->addWhere('category_id = ?',$category_id);
        }

        if($order == 'desc')
        {
            $order == 'desc';
        }else{
            $order == 'asc';
        }
        
        if($orderBy == 'show_order')
        {
            $q->orderBy('show_order '.$order);
        }elseif ($orderBy =='hot') {
            
            $q->orderBy('attend_count '.$order);
        }elseif ($orderBy =='price') 
        {
            $q->orderBy('price '.$order);
        }elseif ($orderBy =='discount') 
        {
            $q->orderBy('discount '.$order);
        }elseif ($orderBy =='end_time') 
        {
            $q->orderBy('end_time '.$order);
        }elseif ($orderBy =='rank')
        {
            $q->orderBy('rank '.$order);
        }elseif ($orderBy =='start_time')
        {
            $q->orderBy('end_time '.$order);
        } elseif ($orderBy == 'created_at') {
            $q->orderBy('created_at '.$order);
        }
        $q->offset($offset);
        $q->limit($pagesize);
        return $q->execute();
    }

    /**
     *
     * 获取团购新的详情页同分类推荐 
     */
    public function getDetaillNewRecommend($filter_id = 0,$catetoryId,$limit = 5)
    {
        $return = array();
        $recommends = $this->addFilterCondition($this->createQuery()->where('id !=?',$filter_id)->andWhere('category_id = ?',$catetoryId)->orderBy('rand()')->limit($limit))->execute();
        if (count($recommends) > 0){
            foreach($recommends as $r)
            {
                $result[$r->getId()] = $r;
            }
        } else {
            return false;
        }
        foreach ($result as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($result[$key]);
            }
            $return[$key]['id'] = $r->getId();
            $return[$key]['title'] = $r->getTitle();
            $return[$key]['price'] = $r->getPrice();
            $return[$key]['original_price'] = $r->getOriginalPrice();
            $return[$key]['discount'] = $r->getDiscount();
            $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,220,220);
        }
        return $return;
    }
    
    /**
     *
     * 随机获取几条推荐数据 
     */
    public function getDetaillNewRandRecommend($catetoryId,$limit = 5)
    {
        $return  = array();
        $recommends = $this->addFilterCondition($this->createQuery()->where('category_id != ?',$catetoryId)->orderBy('rand()')->limit($limit))->execute();
        if (count($recommends) > 0){
            foreach($recommends as $r)
            {
                $result[$r->getId()] = $r;
            }
        } else {
            return false;
        }
        foreach ($result as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($result[$key]);
            }
            $return[$key]['id'] = $r->getId();
            $return[$key]['title'] = $r->getTitle();
            $return[$key]['price'] = $r->getPrice();
            $return[$key]['original_price'] = $r->getOriginalPrice();
            $return[$key]['discount'] = $r->getDiscount();
            $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,220,220);
        }
        return $return;
    }
    
    //根据ids获取团购内容
    function getByIds($ids, $sort = 'rank desc',$weight=310,$height=310)
    {
        $return  = array();
        $recommends = $this->addFilterCondition($this->createQuery()->where("id in (" . join(",", $ids) . ") ")->orderBy($sort))->execute();

        if (count($recommends) > 0){
            foreach($recommends as $r)
            {
                $result[$r->getId()] = $r;
            }
        } else {
            return false;
        }
        foreach ($result as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($result[$key]);
            }
            $return[$key]['id'] = $r->getId();
            $return[$key]['title'] = $r->getTitle();
            $return[$key]['price'] = $r->getPrice();
            $return[$key]['original_price'] = $r->getOriginalPrice();
            $return[$key]['discount'] = $r->getDiscount();
            $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,$weight,$height);
            $return[$key]['start_time'] = $r->getStartTime();
            $return[$key]['end_time'] = $r->getEndTime();
            $return[$key]['attend_count'] = $r->getAttendCount();
            $return[$key]['alliance'] = $r->getAlliance();
            $return[$key]['time'] = round(strtotime($r->getEndTime()) - time());
        }
        return $return;
    }

    //TODO:: For SearchService服务化
    public function getObjByIds($ids, $arr = false) {
        $result  = array();
        $recommends = $this->addFilterCondition($this->createQuery()->where("id in (" . join(",", $ids) . ") ")->orderBy("FIELD(`ID`,".trim(join(",", $ids)) . ')'))->execute();

        if (count($recommends) > 0){
            foreach($recommends as $r)
            {
                $result[] = $r;
            }
        } else {
            return false;
        }
        return $result;
    }

    //根据ids获取团购内容(团购推荐使用)
    function getAllByIds($recommend_ids_arr, $sort = 'rank desc',$weight=310,$height=310)
    {
        $ids = $titles  =  array();
        foreach($recommend_ids_arr as $k=>$v){
            $ids[] = $v['id'];
            $titles[$v['id']] = $v['title'];
        }
        $ids = array_filter(array_unique($ids));
        $return  = array();
        $recommends = $this->addFilterCondition($this->createQuery()->where("id in (" . join(",", $ids) . ") ")->orderBy("FIELD(`ID`,".join(",", $ids).")") )->execute();

        foreach ($recommends as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($recommends[$key]);
            }
            $return[$key]['id'] = $r->getId();
            $return[$key]['title'] = $r->getTitle();
            $return[$key]['price'] = $r->getPrice();
            $return[$key]['original_price'] = $r->getOriginalPrice();
            $return[$key]['discount'] = $r->getDiscount();
            $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,$weight,$height);
            $return[$key]['start_time'] = $r->getStartTime();
            $return[$key]['end_time'] = $r->getEndTime();
            $return[$key]['attend_count'] = $r->getAttendCount();
            $return[$key]['alliance'] = $r->getAlliance();
            $return[$key]['title'] = $titles[$r->getId()];

            $sort_id[$key] = $r->getId();
        }


        return $return;
    }

    /**
     *
     * 获取过期团购数据 
     */
    public function getPastByIds($ids, $sort = 'attend_count desc')
    {
        $return = array();
        $recommends = self::getInstance()
            ->createQuery()
            ->select('t.*')
            ->from('TrdGroupon t')
            ->where("id in (" . join(",", $ids) . ") ")
            ->andWhere('status = ?',6)
            ->orderBy($sort)
            ->execute();
            if (count($recommends) > 0){
                foreach($recommends as $r)
                {
                    $result[$r->getId()] = $r;
                }
            } else {
                return false;
            }
            foreach ($result as $key=>$r)
            {
                if(!is_object($r))
                {
                    unset($result[$key]);
                }
                $return[$key]['id'] = $r->getId();
                $return[$key]['title'] = $r->getTitle();
                $return[$key]['price'] = $r->getPrice();
                $return[$key]['original_price'] = $r->getOriginalPrice();
                $return[$key]['discount'] = $r->getDiscount();
                $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,200,200);
                $return[$key]['start_time'] = $r->getStartTime();
                $return[$key]['end_time'] = $r->getEndTime();
                $return[$key]['attend_count'] = $r->getAttendCount();
                $return[$key]['alliance'] = $r->getAlliance();
            }
        return  $return ;
    }
    
    /**
     *
     * 随机获取几条过期团购数据 
     */
    public function getListNewRandPast($limit = 5,$past_search = null)
    {
        $return = array();
        $ids = array();
        $recommends =  self::getInstance()
            ->createQuery()
            ->select('t.id,t.title')
            ->from('TrdGroupon t')
            ->where('end_time < ?',  date('Y-m-d H:i:s'))
            ->andWhere('deleted_at is null')
            ->andWhere('status = ?',6)
            ->limit($limit);
        if(isset($past_search['brand']))$recommends = $recommends->addWhere('brand_id =?',$past_search['brand']);
        if(isset($past_search['type']))$recommends = $recommends->addWhere('category_id =?',$past_search['type']);
        if(isset($past_search['price'])) {
            $recommends = $recommends->addWhere('price >=?',$past_search['price'][0]);
            $recommends = $recommends->addWhere('price <=?',$past_search['price'][1]);
        }
        $recommends = $recommends->orderBy('rand()');
        $recommends =$recommends->execute();

        if (count($recommends) > 0){
            foreach($recommends as $r)
            {
                $result[$r->getId()] = $r;
            }

            foreach ($result as $key=>$r)
            {
                if(!is_object($r))
                {
                    unset($result[$key]);
                }
                $return[$key]['id'] = $r->getId();
                $return[$key]['title'] = $r->getTitle();
                $return[$key]['price'] = $r->getPrice();
                $return[$key]['original_price'] = $r->getOriginalPrice();
                $return[$key]['discount'] = $r->getDiscount();
                $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,205,206);
                $return[$key]['start_time'] = $r->getStartTime();
                $return[$key]['end_time'] = $r->getEndTime();
                $return[$key]['attend_count'] = $r->getAttendCount();
                $return[$key]['alliance'] = $r->getAlliance();
            }
        }

        if (count($recommends) < $limit){
            $result =array();

            $recommends =  self::getInstance()
                ->createQuery()
                ->select('t.id,t.title')
                ->from('TrdGroupon t')
                ->where('end_time < ?',  date('Y-m-d H:i:s'))
                ->andWhere('deleted_at is null')
                ->andWhere('status = ?',6)
                ->andWhereNotIn('id',$ids)
                ->limit($limit- count($recommends));
            $recommends = $recommends->orderBy('rand()');
            $recommends =$recommends->execute();

            foreach($recommends as $r)
            {
                $result[$r->getId()] = $r;
            }

            foreach ($result as $key=>$r)
            {

                $return[$key]['id'] = $r->getId();
                $return[$key]['title'] = $r->getTitle();
                $return[$key]['price'] = $r->getPrice();
                $return[$key]['original_price'] = $r->getOriginalPrice();
                $return[$key]['discount'] = $r->getDiscount();
                $return[$key]['img_path'] = $r->getImagesFristQiniuCdn(1,205,206);
                $return[$key]['start_time'] = $r->getStartTime();
                $return[$key]['end_time'] = $r->getEndTime();
                $return[$key]['attend_count'] = $r->getAttendCount();
                $return[$key]['alliance'] = $r->getAlliance();
            }

        }

        return  $return ;
    }

    public function getGrouponByIds(array $ids)
    {
        if($ids)
        {
            $return = array();
            $result = array();
            $groups = self::getInstance()
                        ->createQuery()
                        ->where("id in (" . join(",", $ids) . ") ")
                        ->addWhere('deleted_at is null')
                        ->andWhere('status = ?',6)
                        ->execute();

            if (count($groups) > 0){
                foreach($groups as $r)
                {
                    $result[$r->getId()] = $r;
                }
            } else {
                return array();
            }

            $result2 = array();
            foreach($ids AS $key => $id)
            {
                $result2[$id] = $result[$id];
            }
            $result =  $result2;
            foreach ($result as $key=>$r)
            {
                if(!is_object($r))
                {
                    unset($result[$key]);
                }
                $return[$key]['id'] = $r->getId();
                //$return[$key]['title'] = mb_substr($r->getTitle(),0,19,'UTF-8');
                $return[$key]['title'] = $r->getTitle();
                $return[$key]['price'] = $r->getPrice();
                $return[$key]['original_price'] = $r->getOriginalPrice();
                $return[$key]['discount'] = $r->getDiscount();
                $return[$key]['img_path'] = $r->getImagesFristCdn();
                $return[$key]['url']       = $r->getPageUrl();
            }
            return $return;
        }else{
            return array();
        }
    }

    //取得最新的几条团购
    public function getNewGroup($limit)
    {
        $return  = array();
        $groups = $this->addFilterCondition($this->createQuery()->orderBy("start_time desc")->limit($limit))->execute();
        if (count($groups) > 0){
            foreach($groups as $r)
            {
                $result[$r->getId()] = $r;
            }
        } else {
            return false;
        }
        foreach ($result as $key=>$r)
        {
            if(!is_object($r))
            {
                unset($result[$key]);
            }
            $return[$key]['id'] = $r->getId();
            $return[$key]['title'] = $r->getTitle();
            $return[$key]['price'] = $r->getPrice();
            $return[$key]['original_price'] = $r->getOriginalPrice();
            $return[$key]['discount'] = $r->getDiscount();
            $return[$key]['img_path'] = $r->getImagesFristCdn();
            $return[$key]['url']       = $r->getPageUrl();
        }

        return $return;
    }
	/**
	 * 获取某一天要展示的团购
	 * @param $time
	 * @return mixed
	 */
	public function getGrouponByDate($time)
	{
		return self::getInstance()
			->createQuery()
            ->addWhere('deleted_at is null')
			->addWhere('status = 6')
			->addWhere('start_time <= ?',  date('Y-m-d H:i:s',$time))
			->addWhere('end_time >= ?', date('Y-m-d H:i:s',$time))
			->execute();
	}

    //  获得团购的详细信息
    public function getGrouponInfo($grouponId)
    {
        $sql = 'SELECT tg.*,tb.name AS brand_name, tgc.name AS category_name FROM trd_groupon tg
            LEFT JOIN trd_brands tb ON tg.brand_id = tb.id
            LEFT JOIN trd_groupon_category tgc ON tg.category_id = tgc.id where tg.id = ? AND tg.deleted_at is null LIMIT 1';
        $conn = Doctrine_Manager::getInstance()->getConnection('trade');
        $st = $conn->execute($sql, array($grouponId));
        return $st->fetch(Doctrine_Core::FETCH_ASSOC);
    }

    public static  function getGrouponByRank($limit=4)
    {
        $time = time();
        return self::getInstance()
            ->createQuery()
            ->addWhere('status = 6')
            ->addWhere('start_time <= ?',  date('Y-m-d H:i:s',$time))
            ->addWhere('end_time >= ?', date('Y-m-d H:i:s',$time))
            ->addWhere('deleted_at is null')
            ->orderBy('rank')
            ->limit($limit)
            ->execute();
    }
    # 精品推荐随机补充团购
    public static  function getJingpinByRank($limit=4,$rand=0,$date=null)
    {
        $data = CacheModel::getCache();
        if(empty($data)){
            $time = time();
            $tmp = self::getInstance()
                ->createQuery()
                ->select('id,title')
                ->addWhere('status = 6')
                ->addWhere('start_time <= ?',  date('Y-m-d H:i:s',$time))
                ->addWhere('end_time >= ?', date('Y-m-d H:i:s',$time))
                ->addWhere('deleted_at is null')
                ->orderBy('rank')
                ->limit($limit)
                ->fetchArray();
                if(!empty($tmp))foreach($tmp as $v)
                {
                    $data[$v['id']] = $v;
                }
            CacheModel::setCache($data,600);
        }
        return $data;
    }


    public static function getGrouponOneById($id)
    {
        $time = time();
        return self::getInstance()
            ->createQuery()
            ->addWhere('id = ?',$id)
            ->addWhere('status = 6')
            //->addWhere('start_time <= ?',  date('Y-m-d H:i:s',$time))
//            ->addWhere('end_time >= ?', date('Y-m-d H:i:s',$time))
            ->addWhere('deleted_at is null')
            ->fetchOne();
    }

    /**
     * 团购通过标题搜索
     * @param $time
     * @return mixed
     */
    public function getGrouponByKeyword($offset=0, $pagesize=10, $info, $sort='start_time desc')
    {
        $groups = $this->addFilterCondition($this->createQuery()->addWhere('title like ?','%'.$info.'%')->orderBy($sort)->offset($offset)->limit($pagesize))->execute();
        return $groups;
    }

    public function getGrouponById($id)
    {
        return $this->addFilterCondition($this->createQuery()->addWhere("id = ?",$id))->fetchOne();
    }

    public function getGrouponListByIds($ids)
    {
        if (empty($ids)) {
            return array();
        }

        return $this->createQuery()
            ->where('id IN (' . join(',', $ids) . ')')
            ->addWhere('status = 6')
            ->addWhere('deleted_at is null')
            ->orderBy('rank DESC')
            ->execute();
    }

    public function getBiQiang($limit = 3)
    {
        return $this->addFilterCondition($this->createQuery())->addWhere('end_time < ?',  date('Y-m-d H:i:s', (time() + 4*24*60*60)))->orderBy('rank DESC, id DESC')->limit($limit)->execute();
    }

    // 获取可用的团购信息
    public function getGrouponsInfo($limit = null)
    {
        return $this->addFilterCondition($this->createQuery())->orderBy('rank DESC, id DESC')->execute();
    }

    /*序列化*/
    private function _formatGrouponData($data,$height,$width){
        if (!$data) return false;
        $return = array();
        if ($data){
            foreach($data as $k=>$v){
                $return[$k]['id'] = $v->getId();
                $return[$k]['title'] = $v->getTitle();
                $return[$k]['price'] = $v->getPrice();
                $return[$k]['original_price'] = $v->getOriginalPrice();
                $return[$k]['attend_count'] = $v->getAttendCount();
                $return[$k]['discount'] = $v->getDiscount();
                $return[$k]['start_time'] = $v->getStartTime();
                $return[$k]['end_time'] = $v->getEndTime();
                $return[$k]['img_path'] = $v->getImagesFristQiniuCdn(1,$height,$width);
                $return[$k]['alliance'] = $v->getAlliance();
                $return[$k]['usp_logo'] = $v->getUspLogo();
            }
        }
        return $return;
    }

    public static function getJifenData($stime=null,$etime=null)
    {
        if(empty($stime) || empty($etime)) return ;
        $data = array();
        $query = self::getInstance()
            ->createQuery()
            ->select('count(id) as count ,pay_type,type,pay_date')
            ->addWhere('status = 6')
            ->groupBy('pay_type')
            ->addGroupBy('type')
        ;
        if($stime == $etime)
        {
            $query->addWhere('pay_date = ?',$stime);
        }else
        {
            $query->addWhere('pay_date >= ?',$stime);
            $query->addWhere('pay_date <= ?',$etime);
            $query->addGroupBy('pay_date');
        }
        $tmp = $query->fetchArray();

        if(!empty($tmp))
        {
            foreach($tmp as $v)
            {
                $data[$v['pay_date']][$v['type']][$v['pay_type']] = $v['count'];
            }
        }
        return $data;
    }

    public function getGrouponsByIds($array)
    {
        $query = $this->createQuery();

        if(!empty($array['select'])) {
            $query->select($array['select']);
        }
        if(!empty($array['ids'])) {
            $query->where('id IN (' . join(',', $array['ids']) . ')');
        }
        $query->addWhere('status = 6')
            ->addWhere('deleted_at is null');
        if (!empty($array['orderBy'])) {
            if ('new' == $array['orderBy']) {
                $query->orderBy('start_time desc');
            } elseif ('end' == $array['orderBy']) {
                $query->orderBy('start_time asc');
            } elseif ('rank' == $array['orderBy']) {
                $query->orderBy('rank desc');
            } elseif ('hot' == $array['orderBy']) {
                $query->orderBy('attend_count desc');
            } elseif ('discount' == $array['orderBy']) {
                $query->orderBy('discount asc');
            } elseif ('price_d' == $array['orderBy']) {
                $query->orderBy('price desc');
            } elseif ('price_a' == $array['orderBy']) {
                $query->orderBy('price asc');
            }
        } else {
            $query->orderBy('start_time desc');
        }
        if (isset($array['format']) && $array['format']) {
            return $this->_formatGrouponData($query->execute(), $array['height'], $array['width']);
        } else {
            return $query->fetchArray();
        }
    }

    /**
     * 获取下期预告
     * @param $array
     * @param int $height
     * @param int $width
     * @return array
     */
    public function getAllComingGroupon($array, $height = 300, $width = 300) {

        $query = Doctrine_Query::create()
            ->setResultCacheLifeSpan(60 * 2)
            ->useResultCache()
            ->from('TrdGroupon t')
            ->select('t.id, t.title, t.price , t.original_price, t.alliance ,t.attend_count , t.discount, t.start_time, t.end_time, t.attr, t.usp_logo')
            ->where('t.status = ?', 6)
            ->addwhere('t.start_time > ?', date('Y-m-d H:i:s'))
            ->addwhere('t.start_time <= ?', date('Y-m-d H:i:s', time() + 3600 * 24))
            ->addWhere('t.deleted_at is null');
        if (isset($array['brandId']) && $array['brandId']) {
            $query->addWhere('t.brand_id = ?', $array['brandId']);
        }
        if (isset($array['categoryId']) && $array['categoryId']) {
            $query->addWhere('t.category_id = ?', $array['categoryId']);
        }
/*        if ($array['keywords']) {
            $query->addWhere('t.title LIKE ?', '%' . $array['keywords'] . '%');
        }*/
        if (!empty($array['orderBy'])) {
            if ('rank' == $array['orderBy']) {
                $query->orderBy('t.rank desc');
            } elseif ('discount' == $array['orderBy']) {
                $query->orderBy('t.discount asc');
            } elseif ('price_d' == $array['orderBy']) {
                $query->orderBy('t.price desc');
            } elseif ('price_a' == $array['orderBy']) {
                $query->orderBy('t.price asc');
            }
        } else {
            $query->orderBy('t.start_time asc');
        }

        if (isset($array['limit'])) {
            $query->limit($array['limit']);
        }
        if (isset($array['offset'])) {
            $query->offset($array['offset']);
        }
        $data = $query->execute();
        return $this->_formatGrouponData($data, $height, $width);
    }
}

