<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdCollections', 'trade');

/**
 * BaseTrdCollections
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $name_color
 * @property string $memo
 * @property string $memo_color
 * @property string $logo
 * @property string $logo_url
 * @property string $pad_logo
 * @property string $pad_logo_url
 * @property string $shortcut
 * @property boolean $is_hide
 * @property string $other_contents
 * @property Doctrine_Collection $TrdCollectionItems
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getName()               Returns the current record's "name" value
 * @method string              getNameColor()          Returns the current record's "name_color" value
 * @method string              getMemo()               Returns the current record's "memo" value
 * @method string              getMemoColor()          Returns the current record's "memo_color" value
 * @method string              getLogo()               Returns the current record's "logo" value
 * @method string              getLogoUrl()            Returns the current record's "logo_url" value
 * @method string              getPadLogo()            Returns the current record's "pad_logo" value
 * @method string              getPadLogoUrl()         Returns the current record's "pad_logo_url" value
 * @method string              getShortcut()           Returns the current record's "shortcut" value
 * @method boolean             getIsHide()             Returns the current record's "is_hide" value
 * @method string              getOtherContents()      Returns the current record's "other_contents" value
 * @method Doctrine_Collection getTrdCollectionItems() Returns the current record's "TrdCollectionItems" collection
 * @method TrdCollections      setId()                 Sets the current record's "id" value
 * @method TrdCollections      setName()               Sets the current record's "name" value
 * @method TrdCollections      setNameColor()          Sets the current record's "name_color" value
 * @method TrdCollections      setMemo()               Sets the current record's "memo" value
 * @method TrdCollections      setMemoColor()          Sets the current record's "memo_color" value
 * @method TrdCollections      setLogo()               Sets the current record's "logo" value
 * @method TrdCollections      setLogoUrl()            Sets the current record's "logo_url" value
 * @method TrdCollections      setPadLogo()            Sets the current record's "pad_logo" value
 * @method TrdCollections      setPadLogoUrl()         Sets the current record's "pad_logo_url" value
 * @method TrdCollections      setShortcut()           Sets the current record's "shortcut" value
 * @method TrdCollections      setIsHide()             Sets the current record's "is_hide" value
 * @method TrdCollections      setOtherContents()      Sets the current record's "other_contents" value
 * @method TrdCollections      setTrdCollectionItems() Sets the current record's "TrdCollectionItems" collection
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdCollections extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_collections');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('name_color', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('memo', 'string', 500, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 500,
             ));
        $this->hasColumn('memo_color', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('logo', 'string', 2000, array(
             'type' => 'string',
             'length' => 2000,
             ));
        $this->hasColumn('logo_url', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('pad_logo', 'string', 200, array(
             'type' => 'string',
             'length' => 200,
             ));
        $this->hasColumn('pad_logo_url', 'string', 250, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 250,
             ));
        $this->hasColumn('shortcut', 'string', 30, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 30,
             ));
        $this->hasColumn('is_hide', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('other_contents', 'string', 2000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 2000,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('TrdCollectionItems', array(
             'local' => 'id',
             'foreign' => 'collection_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}