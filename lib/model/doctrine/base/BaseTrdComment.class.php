<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdComment', 'trade');

/**
 * BaseTrdComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $type_id
 * @property integer $product_id
 * @property integer $user_id
 * @property integer $to_userid
 * @property string $user_name
 * @property string $to_username
 * @property string $content
 * @property string $imgs_attr
 * @property integer $praise
 * @property integer $against
 * @property integer $reply_count
 * @property integer $ip
 * @property integer $light_status
 * @property integer $status
 * 
 * @method integer    getId()           Returns the current record's "id" value
 * @method integer    getTypeId()       Returns the current record's "type_id" value
 * @method integer    getProductId()    Returns the current record's "product_id" value
 * @method integer    getUserId()       Returns the current record's "user_id" value
 * @method integer    getToUserid()     Returns the current record's "to_userid" value
 * @method string     getUserName()     Returns the current record's "user_name" value
 * @method string     getToUsername()   Returns the current record's "to_username" value
 * @method string     getContent()      Returns the current record's "content" value
 * @method string     getImgsAttr()     Returns the current record's "imgs_attr" value
 * @method integer    getPraise()       Returns the current record's "praise" value
 * @method integer    getAgainst()      Returns the current record's "against" value
 * @method integer    getReplyCount()   Returns the current record's "reply_count" value
 * @method integer    getIp()           Returns the current record's "ip" value
 * @method integer    getLightStatus()  Returns the current record's "light_status" value
 * @method integer    getStatus()       Returns the current record's "status" value
 * @method TrdComment setId()           Sets the current record's "id" value
 * @method TrdComment setTypeId()       Sets the current record's "type_id" value
 * @method TrdComment setProductId()    Sets the current record's "product_id" value
 * @method TrdComment setUserId()       Sets the current record's "user_id" value
 * @method TrdComment setToUserid()     Sets the current record's "to_userid" value
 * @method TrdComment setUserName()     Sets the current record's "user_name" value
 * @method TrdComment setToUsername()   Sets the current record's "to_username" value
 * @method TrdComment setContent()      Sets the current record's "content" value
 * @method TrdComment setImgsAttr()     Sets the current record's "imgs_attr" value
 * @method TrdComment setPraise()       Sets the current record's "praise" value
 * @method TrdComment setAgainst()      Sets the current record's "against" value
 * @method TrdComment setReplyCount()   Sets the current record's "reply_count" value
 * @method TrdComment setIp()           Sets the current record's "ip" value
 * @method TrdComment setLightStatus()  Sets the current record's "light_status" value
 * @method TrdComment setStatus()       Sets the current record's "status" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdComment extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_comment');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('type_id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             ));
        $this->hasColumn('to_userid', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_name', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('to_username', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('content', 'string', 10000, array(
             'type' => 'string',
             'length' => 10000,
             ));
        $this->hasColumn('imgs_attr', 'string', 2000, array(
             'type' => 'string',
             'length' => 2000,
             ));
        $this->hasColumn('praise', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('against', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('reply_count', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('ip', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('light_status', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}