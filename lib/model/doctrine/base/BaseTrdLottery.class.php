<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdLottery', 'trade');

/**
 * BaseTrdLottery
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $lottery_name
 * @property string $lottery_desc
 * @property integer $max_rand
 * @property integer $is_must
 * @property string $fail_msg
 * @property integer $lottery_num_type
 * @property integer $user_lottery_num
 * @property integer $attr_lottery_num
 * @property integer $start_time
 * @property integer $end_time
 * @property string $bg_img
 * @property string $pointer_img
 * @property string $round_img
 * @property integer $status
 * 
 * @method integer    getId()               Returns the current record's "id" value
 * @method string     getLotteryName()      Returns the current record's "lottery_name" value
 * @method string     getLotteryDesc()      Returns the current record's "lottery_desc" value
 * @method integer    getMaxRand()          Returns the current record's "max_rand" value
 * @method integer    getIsMust()           Returns the current record's "is_must" value
 * @method string     getFailMsg()          Returns the current record's "fail_msg" value
 * @method integer    getLotteryNumType()   Returns the current record's "lottery_num_type" value
 * @method integer    getUserLotteryNum()   Returns the current record's "user_lottery_num" value
 * @method integer    getAttrLotteryNum()   Returns the current record's "attr_lottery_num" value
 * @method integer    getStartTime()        Returns the current record's "start_time" value
 * @method integer    getEndTime()          Returns the current record's "end_time" value
 * @method string     getBgImg()            Returns the current record's "bg_img" value
 * @method string     getPointerImg()       Returns the current record's "pointer_img" value
 * @method string     getRoundImg()         Returns the current record's "round_img" value
 * @method integer    getStatus()           Returns the current record's "status" value
 * @method TrdLottery setId()               Sets the current record's "id" value
 * @method TrdLottery setLotteryName()      Sets the current record's "lottery_name" value
 * @method TrdLottery setLotteryDesc()      Sets the current record's "lottery_desc" value
 * @method TrdLottery setMaxRand()          Sets the current record's "max_rand" value
 * @method TrdLottery setIsMust()           Sets the current record's "is_must" value
 * @method TrdLottery setFailMsg()          Sets the current record's "fail_msg" value
 * @method TrdLottery setLotteryNumType()   Sets the current record's "lottery_num_type" value
 * @method TrdLottery setUserLotteryNum()   Sets the current record's "user_lottery_num" value
 * @method TrdLottery setAttrLotteryNum()   Sets the current record's "attr_lottery_num" value
 * @method TrdLottery setStartTime()        Sets the current record's "start_time" value
 * @method TrdLottery setEndTime()          Sets the current record's "end_time" value
 * @method TrdLottery setBgImg()            Sets the current record's "bg_img" value
 * @method TrdLottery setPointerImg()       Sets the current record's "pointer_img" value
 * @method TrdLottery setRoundImg()         Sets the current record's "round_img" value
 * @method TrdLottery setStatus()           Sets the current record's "status" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdLottery extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_lottery');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('lottery_name', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 64,
             ));
        $this->hasColumn('lottery_desc', 'string', 5000, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 5000,
             ));
        $this->hasColumn('max_rand', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('is_must', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 1,
             'length' => 1,
             ));
        $this->hasColumn('fail_msg', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 64,
             ));
        $this->hasColumn('lottery_num_type', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 1,
             'length' => 1,
             ));
        $this->hasColumn('user_lottery_num', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 1,
             'length' => 1,
             ));
        $this->hasColumn('attr_lottery_num', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('start_time', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('end_time', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('bg_img', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 255,
             ));
        $this->hasColumn('pointer_img', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 255,
             ));
        $this->hasColumn('round_img', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 255,
             ));
        $this->hasColumn('status', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 1,
             'length' => 8,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}