<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdLipinkaCard', 'trade');

/**
 * BaseTrdLipinkaCard
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $record_id
 * @property integer $lipinka_id
 * @property string $account
 * @property integer $user_id
 * @property integer $is_large
 * @property integer $large_id
 * @property integer $postpone_type
 * @property integer $postpone_day
 * @property integer $overdue_time
 * @property integer $stime
 * @property integer $etime
 * @property integer $status
 * @property integer $create_type
 * @property integer $sync_status
 * @property integer $amount
 * 
 * @method integer        getId()            Returns the current record's "id" value
 * @method integer        getRecordId()      Returns the current record's "record_id" value
 * @method integer        getLipinkaId()     Returns the current record's "lipinka_id" value
 * @method string         getAccount()       Returns the current record's "account" value
 * @method integer        getUserId()        Returns the current record's "user_id" value
 * @method integer        getIsLarge()       Returns the current record's "is_large" value
 * @method integer        getLargeId()       Returns the current record's "large_id" value
 * @method integer        getPostponeType()  Returns the current record's "postpone_type" value
 * @method integer        getPostponeDay()   Returns the current record's "postpone_day" value
 * @method integer        getOverdueTime()   Returns the current record's "overdue_time" value
 * @method integer        getStime()         Returns the current record's "stime" value
 * @method integer        getEtime()         Returns the current record's "etime" value
 * @method integer        getStatus()        Returns the current record's "status" value
 * @method integer        getCreateType()    Returns the current record's "create_type" value
 * @method integer        getSyncStatus()    Returns the current record's "sync_status" value
 * @method integer        getAmount()        Returns the current record's "amount" value
 * @method TrdLipinkaCard setId()            Sets the current record's "id" value
 * @method TrdLipinkaCard setRecordId()      Sets the current record's "record_id" value
 * @method TrdLipinkaCard setLipinkaId()     Sets the current record's "lipinka_id" value
 * @method TrdLipinkaCard setAccount()       Sets the current record's "account" value
 * @method TrdLipinkaCard setUserId()        Sets the current record's "user_id" value
 * @method TrdLipinkaCard setIsLarge()       Sets the current record's "is_large" value
 * @method TrdLipinkaCard setLargeId()       Sets the current record's "large_id" value
 * @method TrdLipinkaCard setPostponeType()  Sets the current record's "postpone_type" value
 * @method TrdLipinkaCard setPostponeDay()   Sets the current record's "postpone_day" value
 * @method TrdLipinkaCard setOverdueTime()   Sets the current record's "overdue_time" value
 * @method TrdLipinkaCard setStime()         Sets the current record's "stime" value
 * @method TrdLipinkaCard setEtime()         Sets the current record's "etime" value
 * @method TrdLipinkaCard setStatus()        Sets the current record's "status" value
 * @method TrdLipinkaCard setCreateType()    Sets the current record's "create_type" value
 * @method TrdLipinkaCard setSyncStatus()    Sets the current record's "sync_status" value
 * @method TrdLipinkaCard setAmount()        Sets the current record's "amount" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdLipinkaCard extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_lipinka_card');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('record_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('lipinka_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('account', 'string', 10, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 10,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('is_large', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('large_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('postpone_type', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 1,
             'length' => 1,
             ));
        $this->hasColumn('postpone_day', 'integer', 6, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 6,
             ));
        $this->hasColumn('overdue_time', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('stime', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('etime', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 8,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('create_type', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('sync_status', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('amount', 'integer', 6, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 6,
             ));


        $this->index('lipinka_id', array(
             'fields' => 
             array(
              0 => 'lipinka_id',
             ),
             ));
        $this->index('record_id', array(
             'fields' => 
             array(
              0 => 'record_id',
             ),
             ));
        $this->index('user_id', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
        $this->index('account', array(
             'fields' => 
             array(
              0 => 'account',
             ),
             ));
        $this->index('large_id', array(
             'fields' => 
             array(
              0 => 'large_id',
             ),
             ));
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}