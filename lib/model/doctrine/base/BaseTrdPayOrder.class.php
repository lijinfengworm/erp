<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdPayOrder', 'trade');

/**
 * BaseTrdPayOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $sign
 * @property integer $pay_uid
 * @property string $title
 * @property string $desc
 * @property float $amount
 * @property string $callback_url
 * @property string $notify_url
 * @property string $yzm
 * @property string $order_no
 * @property integer $pay_type
 * @property integer $is_pay
 * @property integer $callback_error_num
 * @property datetime $created_at
 * @property datetime $updated_at
 * 
 * @method integer     getId()                 Returns the current record's "id" value
 * @method string      getSign()               Returns the current record's "sign" value
 * @method integer     getPayUid()             Returns the current record's "pay_uid" value
 * @method string      getTitle()              Returns the current record's "title" value
 * @method string      getDesc()               Returns the current record's "desc" value
 * @method float       getAmount()             Returns the current record's "amount" value
 * @method string      getCallbackUrl()        Returns the current record's "callback_url" value
 * @method string      getNotifyUrl()          Returns the current record's "notify_url" value
 * @method string      getYzm()                Returns the current record's "yzm" value
 * @method string      getOrderNo()            Returns the current record's "order_no" value
 * @method integer     getPayType()            Returns the current record's "pay_type" value
 * @method integer     getIsPay()              Returns the current record's "is_pay" value
 * @method integer     getCallbackErrorNum()   Returns the current record's "callback_error_num" value
 * @method datetime    getCreatedAt()          Returns the current record's "created_at" value
 * @method datetime    getUpdatedAt()          Returns the current record's "updated_at" value
 * @method TrdPayOrder setId()                 Sets the current record's "id" value
 * @method TrdPayOrder setSign()               Sets the current record's "sign" value
 * @method TrdPayOrder setPayUid()             Sets the current record's "pay_uid" value
 * @method TrdPayOrder setTitle()              Sets the current record's "title" value
 * @method TrdPayOrder setDesc()               Sets the current record's "desc" value
 * @method TrdPayOrder setAmount()             Sets the current record's "amount" value
 * @method TrdPayOrder setCallbackUrl()        Sets the current record's "callback_url" value
 * @method TrdPayOrder setNotifyUrl()          Sets the current record's "notify_url" value
 * @method TrdPayOrder setYzm()                Sets the current record's "yzm" value
 * @method TrdPayOrder setOrderNo()            Sets the current record's "order_no" value
 * @method TrdPayOrder setPayType()            Sets the current record's "pay_type" value
 * @method TrdPayOrder setIsPay()              Sets the current record's "is_pay" value
 * @method TrdPayOrder setCallbackErrorNum()   Sets the current record's "callback_error_num" value
 * @method TrdPayOrder setCreatedAt()          Sets the current record's "created_at" value
 * @method TrdPayOrder setUpdatedAt()          Sets the current record's "updated_at" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdPayOrder extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_pay_order');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('sign', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('pay_uid', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             ));
        $this->hasColumn('title', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
        $this->hasColumn('desc', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('amount', 'float', 8, array(
             'type' => 'float',
             'length' => 8,
             'scale' => 2,
             ));
        $this->hasColumn('callback_url', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('notify_url', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('yzm', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('order_no', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('pay_type', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => 1,
             ));
        $this->hasColumn('is_pay', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('callback_error_num', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             ));
        $this->hasColumn('created_at', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('updated_at', 'datetime', null, array(
             'type' => 'datetime',
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}