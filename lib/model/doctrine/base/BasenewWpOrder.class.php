<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('newWpOrder', 'doctrine');

/**
 * BasenewWpOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $status
 * @property integer $user_id
 * @property string $user_name
 * @property string $role_user_id
 * @property string $role_user_name
 * @property string $wpgame_name
 * @property string $wpserver_name
 * @property string $wppayment_name
 * @property integer $wppayment_id
 * @property integer $order_no
 * @property float $amount
 * @property string $ip
 * 
 * @method integer    getId()             Returns the current record's "id" value
 * @method integer    getStatus()         Returns the current record's "status" value
 * @method integer    getUserId()         Returns the current record's "user_id" value
 * @method string     getUserName()       Returns the current record's "user_name" value
 * @method string     getRoleUserId()     Returns the current record's "role_user_id" value
 * @method string     getRoleUserName()   Returns the current record's "role_user_name" value
 * @method string     getWpgameName()     Returns the current record's "wpgame_name" value
 * @method string     getWpserverName()   Returns the current record's "wpserver_name" value
 * @method string     getWppaymentName()  Returns the current record's "wppayment_name" value
 * @method integer    getWppaymentId()    Returns the current record's "wppayment_id" value
 * @method integer    getOrderNo()        Returns the current record's "order_no" value
 * @method float      getAmount()         Returns the current record's "amount" value
 * @method string     getIp()             Returns the current record's "ip" value
 * @method newWpOrder setId()             Sets the current record's "id" value
 * @method newWpOrder setStatus()         Sets the current record's "status" value
 * @method newWpOrder setUserId()         Sets the current record's "user_id" value
 * @method newWpOrder setUserName()       Sets the current record's "user_name" value
 * @method newWpOrder setRoleUserId()     Sets the current record's "role_user_id" value
 * @method newWpOrder setRoleUserName()   Sets the current record's "role_user_name" value
 * @method newWpOrder setWpgameName()     Sets the current record's "wpgame_name" value
 * @method newWpOrder setWpserverName()   Sets the current record's "wpserver_name" value
 * @method newWpOrder setWppaymentName()  Sets the current record's "wppayment_name" value
 * @method newWpOrder setWppaymentId()    Sets the current record's "wppayment_id" value
 * @method newWpOrder setOrderNo()        Sets the current record's "order_no" value
 * @method newWpOrder setAmount()         Sets the current record's "amount" value
 * @method newWpOrder setIp()             Sets the current record's "ip" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasenewWpOrder extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('newWpOrders');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 8,
             ));
        $this->hasColumn('user_name', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 45,
             ));
        $this->hasColumn('role_user_id', 'string', 25, array(
             'type' => 'string',
             'unsigned' => true,
             'length' => 25,
             ));
        $this->hasColumn('role_user_name', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('wpgame_name', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 45,
             ));
        $this->hasColumn('wpserver_name', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 45,
             ));
        $this->hasColumn('wppayment_name', 'string', 45, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 45,
             ));
        $this->hasColumn('wppayment_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 8,
             ));
        $this->hasColumn('order_no', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             'unsigned' => true,
             'notnull' => true,
             ));
        $this->hasColumn('ip', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}