<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TrdAmzProduct', 'trade');

/**
 * BaseTrdAmzProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $shid
 * @property string $amzid
 * @property string $imgurl
 * @property string $enname
 * @property string $cnname
 * @property string $category
 * @property string $brand
 * @property float $price
 * @property integer $comment
 * @property integer $hdtype
 * @property integer $oldhdtype
 * @property integer $shtype
 * @property integer $page
 * @property integer $status
 * 
 * @method integer       getId()        Returns the current record's "id" value
 * @method integer       getShid()      Returns the current record's "shid" value
 * @method string        getAmzid()     Returns the current record's "amzid" value
 * @method string        getImgurl()    Returns the current record's "imgurl" value
 * @method string        getEnname()    Returns the current record's "enname" value
 * @method string        getCnname()    Returns the current record's "cnname" value
 * @method string        getCategory()  Returns the current record's "category" value
 * @method string        getBrand()     Returns the current record's "brand" value
 * @method float         getPrice()     Returns the current record's "price" value
 * @method integer       getComment()   Returns the current record's "comment" value
 * @method integer       getHdtype()    Returns the current record's "hdtype" value
 * @method integer       getOldhdtype() Returns the current record's "oldhdtype" value
 * @method integer       getShtype()    Returns the current record's "shtype" value
 * @method integer       getPage()      Returns the current record's "page" value
 * @method integer       getStatus()    Returns the current record's "status" value
 * @method TrdAmzProduct setId()        Sets the current record's "id" value
 * @method TrdAmzProduct setShid()      Sets the current record's "shid" value
 * @method TrdAmzProduct setAmzid()     Sets the current record's "amzid" value
 * @method TrdAmzProduct setImgurl()    Sets the current record's "imgurl" value
 * @method TrdAmzProduct setEnname()    Sets the current record's "enname" value
 * @method TrdAmzProduct setCnname()    Sets the current record's "cnname" value
 * @method TrdAmzProduct setCategory()  Sets the current record's "category" value
 * @method TrdAmzProduct setBrand()     Sets the current record's "brand" value
 * @method TrdAmzProduct setPrice()     Sets the current record's "price" value
 * @method TrdAmzProduct setComment()   Sets the current record's "comment" value
 * @method TrdAmzProduct setHdtype()    Sets the current record's "hdtype" value
 * @method TrdAmzProduct setOldhdtype() Sets the current record's "oldhdtype" value
 * @method TrdAmzProduct setShtype()    Sets the current record's "shtype" value
 * @method TrdAmzProduct setPage()      Sets the current record's "page" value
 * @method TrdAmzProduct setStatus()    Sets the current record's "status" value
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTrdAmzProduct extends sfDoctrineMasterSlaveRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('trd_amz_products');
        $this->hasColumn('id', 'integer', 10, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 10,
             ));
        $this->hasColumn('shid', 'integer', 10, array(
             'type' => 'integer',
             'length' => 10,
             ));
        $this->hasColumn('amzid', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('imgurl', 'string', 150, array(
             'type' => 'string',
             'length' => 150,
             ));
        $this->hasColumn('enname', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('cnname', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('category', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('brand', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('price', 'float', 8, array(
             'type' => 'float',
             'length' => 8,
             'scale' => '2',
             ));
        $this->hasColumn('comment', 'integer', 10, array(
             'type' => 'integer',
             'length' => 10,
             ));
        $this->hasColumn('hdtype', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));
        $this->hasColumn('oldhdtype', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));
        $this->hasColumn('shtype', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));
        $this->hasColumn('page', 'integer', 10, array(
             'type' => 'integer',
             'length' => 10,
             ));
        $this->hasColumn('status', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}