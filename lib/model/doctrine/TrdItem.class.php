<?php

/**
 * TrdItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    HC
 * @subpackage model
 * @author     HoopChina.com Dev Team
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TrdItem extends BaseTrdItem
{
    private $externalUsername;
    
    function get_by_id($item_id) {
        $item = TrdItemTable::getInstance()
            ->createQuery()
            ->select('t.*, c.name, t.style_ids, b.name, b.id')
            ->from('TrdItem t')
            ->leftJoin('t.Brand b')
            ->leftJoin('t.Category c')
            ->where('t.is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('t.status = ?', TrdItemTable::STATUS_NORMAL)
            ->andWhere('id = ?', $item_id)
            ->fetchOne();

        return $item;
    }

    function getUsers() {
        $users = TrdUserTable::getInstance()
            ->createQuery()
            ->select('ui.*')
            ->from('TrdUserItem ui')
            ->leftJoin('ui.User u')
            ->where('ui.item_id = ?', $this->getId())
            ->execute();

        return $users;
    }

    //拿到所有状态的item
    function get_by_id_all($item_id) {
        $item = TrdItemTable::getInstance()
            ->createQuery()
            ->select('t.*, c.name, t.style_ids, b.name, b.id')
            ->from('TrdItem t')
            ->leftJoin('t.Brand b')
            ->leftJoin('t.Category c')
            ->andWhere('id = ?', $item_id)
            ->fetchOne();

        return $item;
    }

    function getSimilar($item_id, $condition, $limit = 8, $except_ids = array()) {
        $item = $this->get_by_id($item_id);
        $sql = TrdItemTable::getInstance()
            ->createQuery()
            ->setResultCacheLifeSpan(60*60*12)
            ->useResultCache()
            ->select('t.id, t.item_id, t.name, t.title,t.memo, t.price, t.url, t.freight_payer, b.name, t.img_url, t.click_count, t.is_verified, c.name, t.style_ids, b.name, b.id, t.sold_count')
            ->from('TrdItem t')
            ->leftJoin('t.Brand b')
            ->leftJoin('t.Category c')
            ->where('t.is_hide = ?', TrdItemTable::SHOW)
            ->andWhere('t.status = ?', TrdItemTable::STATUS_NORMAL)
            ->andWhere('t.is_soldout = 0')
            ->andWhere('id != ?', $item["id"])
            ->groupby('t.item_id')
            ->limit($limit);

        if(isset($item["item_id"]) && $item["item_id"]) {
            $sql->andWhere('t.item_id != ?', $item["item_id"]);
        }

        if(!empty($except_ids)) {
            if($except_ids['id_str']) {
                $sql->addWhere("id not in  ({$except_ids['id_str']})");
            }

            if($except_ids['itemid_str']) {
                $sql->addWhere("item_id not in  ({$except_ids['itemid_str']})");
            }
        }

        //同价格
        if(in_array("price", $condition)) {
            $sql->addWhere("price > ?", $item["price"] - 100);
            $sql->addWhere("price < ?", $item["price"] + 100);
        }

        //同品牌
        if(in_array("brand", $condition)) {
            $sql->addWhere("brand_id = ?", $item["brand_id"]);
        }

        //同分类
        if(in_array("category", $condition)) {
            $sql->addWhere("category_id = ?", $item["category_id"]);
        }

        //已验证
        if(in_array("verified", $condition)) {
            $sql->addWhere("is_verified = ?", 1);
        }

        //未验证
        if(in_array("unverified", $condition)) {
            $sql->addWhere("is_verified = ?", 0);
        }

        return $sql->execute();

    }
    function getImgSrc() {
        return '/uploads/trade_imgs/' . $this->getImgUrl();
    }
    
    public function setExternalUsername($externalUsername)
    {
      $this->externalUsername = $externalUsername;
    }
    
    public function getExternalUsername()
    {
      return $this->externalUsername;
    }
    
    public function isBanned()
    {
      return $this->getStatus() == TrdItemTable::STATUS_BANNED;
    }
    
    public function isBannedPermanent()
    {
      return $this->getStatus() == TrdItemTable::STATUS_BANNED_PERMANENT;
    }     
   
    public function getLikeCountFromDesireTable()
    {
        $count = TrdDesireTable::getInstance()->createQuery('d')->select('count(*) sum')->where('d.item_id = ?',  $this->getId())->execute()->getFirst();
        return $count->getSum();
    }
    public function getRankByBaseDate() {
       $modifiedFields = $this->getModified();
       if($this->isNew() && empty($modifiedFields['created_at']))
       {
           $count = time();
       }else{
           $count = strtotime($this->getCreatedAt());
       }
//       if($this->getLikeCount() > 0)
//       {
//           $count += log($this->getLikeCount()+1,2)*3600;
//       } 
       if($this->getClickCount() > 0)
       {
           $count += log10($this->getClickCount()+1)*3600;
       }
       if($this->getGiveMoney() > 0)
       {
           $count += 3600*5;
       }
       if($this->getIsVerified())
       {
           $count += 3600*2;
       }
       return $count;
       
    }
    public function save(Doctrine_Connection $conn = null) 
    {
        
        $modifiedFields = $this->getModified(true);
        $updateRankArray = array('click_count','created_at','give_money','is_verified','rank');
        if($this->isNew() || array_intersect($updateRankArray,array_keys($modifiedFields)))
        {
            $this->setRank($this->getRankByBaseDate());
        }
        if($this->getOriginalPrice()){
            $this->setPrice($this->getOriginalPrice());
        }
        parent::save($conn);
        $syncKeyArray =array('shop_id','item_id','name','memo','title','url','price','original_price','freight_payer','img_url','item_no','sold_count','is_soldout','click_count','like_count','is_hide','give_money','publish_date','status','created_at','baoliao_id','mart','hupu_uid','hupu_username');
        $all_id = '';
        if($this->isNew() || array_intersect($syncKeyArray,array_keys($modifiedFields)))
        {
            $all_id = $this->syncToAll();
        }
        return array($this->getId(),$all_id);
        
    }
    
    public function syncToAll()
    {
        $itemAll = TrdItemAllTable::getInstance()->createQuery()->where('shoe_id = ?',  $this->getId())->execute()->getFirst();
        if(!$itemAll)
        {
            $itemAll = new TrdItemAll();
        }
        $itemAll->setShopId($this->getShopId());
        $itemAll->setShoeId($this->getId());
        $itemAll->setItemId($this->getItemId());
        $itemAll->setName($this->getName());
        $itemAll->setMemo($this->getMemo());
        $itemAll->setTitle($this->getTitle());
        $itemAll->setUrl($this->getUrl());
        $itemAll->setPrice($this->getPrice());
        $itemAll->setOriginalPrice($this->getOriginalPrice());
        $itemAll->setFreightPayer($this->getFreightPayer());
        $itemAll->setImgUrl($this->getImgUrl());
        $itemAll->setItemNo($this->getItemNo());
        $itemAll->setCategoryAllId(1);
        $itemAll->setSoldCount($this->getSoldCount());
        $itemAll->setIsSoldout($this->getIsSoldout());
        $itemAll->setClickCount($this->getClickCount());
        $itemAll->setLikeCount($this->getLikeCount());
        $itemAll->setIsHide($this->getIsHide());
        $itemAll->setBaoliaoId($this->getBaoliaoId());
        $itemAll->setMart($this->getMart());
        $itemAll->setGiveMoney($this->getGiveMoney());
        $itemAll->setStatus($this->getStatus());
        $itemAll->setCreatedAt($this->getCreatedAt());
        $itemAll->setPublishDate(strtotime($this->getCreatedAt()));
        $itemAll->setHupuUid($this->getHupuUid());
        $itemAll->setHupuUsername($this->getHupuUsername());
        $itemAll->save();
        return $itemAll->getId();
    }

    public function clickAdd() {
        $this->setClickCount($this->getClickCount() + 1);
        $this->setHeat($this->getHeat() + 1);
        $this->save();
    }

    public function getItemAll() {
        $TrdItemAll = TrdItemAllTable::getInstance();
        return $TrdItemAll->getByShoeId($this->getId());
    }

    function getImgBySize($size = 300) {
        return str_replace(".jpg", "_{$size}.jpg", $this->getImgUrl());
    }
    public function getLink($is_abusolut = false) {
        sfProjectConfiguration::getActive()->loadHelpers('Url');
        $opt = array();
        if($is_abusolut) {
            $opt["abusolut"] = true;
        }
        return url_for("@item_all_detail?item_id=" . $this->getId() . "&type=shoe", $opt);
    }    
    function getUpdateUrl($opt = array()){
        sfProjectConfiguration::getActive()->loadHelpers('Url');
        return url_for("@item_update?item_id=" . $this->getId(), $opt);
    }    
}
